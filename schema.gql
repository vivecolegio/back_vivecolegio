# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The AcademicArea model"""
type AcademicArea implements IModelSchoolData {
  abbreviation: String
  academicGrade: [AcademicGrade!]
  academicGradeId: [String!]
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  generalAcademicArea: GeneralAcademicArea
  generalAcademicAreaId: String
  id: ID!
  isAverage: Boolean
  name: String
  order: Float
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicAreaConnection {
  edges: [AcademicAreaEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

"""The AcademicAreaCoursePeriodValuation model"""
type AcademicAreaCoursePeriodValuation implements IModelCampusData {
  academicArea: AcademicArea
  academicAreaId: String
  academicAsignatureCourse: AcademicArea
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  valuationType: ValuationType
  version: Float
}

type AcademicAreaCoursePeriodValuationConnection {
  edges: [AcademicAreaCoursePeriodValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicAreaCoursePeriodValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicAreaCoursePeriodValuation!
}

"""The AcademicAreaCourseYearValuation model"""
type AcademicAreaCourseYearValuation implements IModelCampusData {
  academicArea: AcademicArea
  academicAreaId: String
  academicAsignatureCourse: AcademicArea
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  valuationType: ValuationType
  version: Float
}

type AcademicAreaCourseYearValuationConnection {
  edges: [AcademicAreaCourseYearValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicAreaCourseYearValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicAreaCourseYearValuation!
}

type AcademicAreaEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicArea!
}

"""The AcademicAsignature model"""
type AcademicAsignature implements IModelSchoolData {
  abbreviation: String
  academicArea: AcademicArea
  academicAreaId: String
  academicGrade: [AcademicGrade!]
  academicGradeId: [String!]
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  generalAcademicAsignature: GeneralAcademicAsignature
  generalAcademicAsignatureId: String
  id: ID!
  maxWeight: Float
  minWeight: Float
  name: String
  order: Float
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicAsignatureConnection {
  edges: [AcademicAsignatureEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

"""The AcademicAsignatureCourse model"""
type AcademicAsignatureCourse implements IModelCampusData {
  academicAsignature: AcademicAsignature
  academicAsignatureId: String
  active: Boolean
  campus: Campus
  campusId: String
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  gradeAssignment: GradeAssignment
  gradeAssignmentId: String
  hourlyIntensity: Float
  id: ID!
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  teacher: Teacher
  teacherId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
  weight: Float
}

type AcademicAsignatureCourseConnection {
  edges: [AcademicAsignatureCourseEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicAsignatureCourseEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicAsignatureCourse!
}

"""The AcademicAsignatureCoursePeriodEvidenceLearningValuation model"""
type AcademicAsignatureCoursePeriodEvidenceLearningValuation implements IModelCampusData {
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  evidenceLearning: EvidenceLearning
  evidenceLearningId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicAsignatureCoursePeriodEvidenceLearningValuationConnection {
  edges: [AcademicAsignatureCoursePeriodEvidenceLearningValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicAsignatureCoursePeriodEvidenceLearningValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicAsignatureCoursePeriodEvidenceLearningValuation!
}

"""The AcademicAsignatureCoursePeriodValuation model"""
type AcademicAsignatureCoursePeriodValuation implements IModelCampusData {
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  valuationType: ValuationType
  version: Float
}

type AcademicAsignatureCoursePeriodValuationConnection {
  edges: [AcademicAsignatureCoursePeriodValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicAsignatureCoursePeriodValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicAsignatureCoursePeriodValuation!
}

"""The AcademicAsignatureCourseYearValuation model"""
type AcademicAsignatureCourseYearValuation implements IModelCampusData {
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  academicPeriod: SchoolYear
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  valuationType: ValuationType
  version: Float
}

type AcademicAsignatureCourseYearValuationConnection {
  edges: [AcademicAsignatureCourseYearValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicAsignatureCourseYearValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicAsignatureCourseYearValuation!
}

type AcademicAsignatureEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicAsignature!
}

"""The AcademicDay model"""
type AcademicDay implements IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  day: [Day!]
  entityBaseId: String
  id: ID!
  name: String
  nameSIMAT: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicDayConnection {
  edges: [AcademicDayEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicDayEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicDay!
}

"""The AcademicGrade model"""
type AcademicGrade implements IModelSchoolData {
  active: Boolean
  countStudent: Float
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  educationLevel: EducationLevel
  educationLevelId: String
  entityBaseId: String
  generalAcademicCycle: GeneralAcademicCycle
  generalAcademicCycleId: String
  generalAcademicGrade: GeneralAcademicGrade
  generalAcademicGradeId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  specialty: Specialty
  specialtyId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicGradeConnection {
  edges: [AcademicGradeEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicGradeEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicGrade!
}

"""The AcademicHour model"""
type AcademicHour implements IModelCampusData {
  academicDay: AcademicDay
  academicDayId: String
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  endTime: String
  entityBaseId: String
  id: ID!
  order: Float
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  startTime: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicHourConnection {
  edges: [AcademicHourEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicHourEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicHour!
}

"""The AcademicPeriod model"""
type AcademicPeriod implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  endDate: DateTime
  endDateRecovery: DateTime
  entityBaseId: String
  id: ID!
  name: String
  order: Float
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  startDate: DateTime
  startDateRecovery: DateTime
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
  weight: Float
}

type AcademicPeriodConnection {
  edges: [AcademicPeriodEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicPeriodEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicPeriod!
}

"""The AcademicSchedule model"""
type AcademicSchedule implements IModelCampusData {
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  active: Boolean
  campus: Campus
  campusId: String
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  day: String
  endAcademicHour: AcademicHour
  endAcademicHourId: String
  id: ID!
  school: School
  schoolId: String
  startAcademicHour: AcademicHour
  startAcademicHourId: String
  teacher: Teacher
  teacherId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicScheduleConnection {
  edges: [AcademicScheduleEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicScheduleEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicSchedule!
}

"""The AcademicStandard model"""
type AcademicStandard implements IModelSchoolData {
  academicAsignature: AcademicAsignature
  academicAsignatureId: String
  academicGrade: AcademicGrade
  academicGradeId: String
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicStandard: GeneralAcademicStandard
  generalAcademicStandardId: String
  id: ID!
  school: School
  schoolId: String
  standard: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicStandardConnection {
  edges: [AcademicStandardEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicStandardEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicStandard!
}

"""The AuditLogin model"""
type AuditLogin implements IModelData {
  active: Boolean
  auth: Boolean
  browser: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  geo: String
  id: ID!
  ip: String
  ipware: String
  ipwarePublic: String
  language: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  username: String
  version: Float
}

type AuditLoginConnection {
  edges: [AuditLoginEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AuditLoginEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AuditLogin!
}

"""The AverageAcademicPeriodStudent model"""
type AverageAcademicPeriodStudent implements IModelCampusData {
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  score: Float
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AverageAcademicPeriodStudentConnection {
  edges: [AverageAcademicPeriodStudentEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AverageAcademicPeriodStudentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AverageAcademicPeriodStudent!
}

"""The AverageAcademicYearCourse model"""
type AverageAcademicYearCourse implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AverageAcademicYearCourseConnection {
  edges: [AverageAcademicYearCourseEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AverageAcademicYearCourseEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AverageAcademicYearCourse!
}

"""The AverageAcademicYearStudent model"""
type AverageAcademicYearStudent implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  promoted: Boolean
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  score: Float
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AverageAcademicYearStudentConnection {
  edges: [AverageAcademicYearStudentEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AverageAcademicYearStudentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AverageAcademicYearStudent!
}

"""The Campus model"""
type Campus implements IModelData {
  active: Boolean
  consecutive: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  daneCodeCampus: String
  id: ID!
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

"""The CampusAdministrator model"""
type CampusAdministrator implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type CampusAdministratorConnection {
  edges: [CampusAdministratorEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type CampusAdministratorEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: CampusAdministrator!
}

type CampusConnection {
  edges: [CampusEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

"""The CampusCoordinator model"""
type CampusCoordinator implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type CampusCoordinatorConnection {
  edges: [CampusCoordinatorEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type CampusCoordinatorEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: CampusCoordinator!
}

type CampusEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Campus!
}

"""The ClassroomPlan model"""
type ClassroomPlan implements IModelCampusData {
  academicAsignature: AcademicAsignature
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  academicAsignatureId: String
  academicGrade: AcademicGrade
  academicGradeId: String
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  academicStandards: [AcademicStandard!]
  academicStandardsId: [String!]
  active: Boolean
  campus: Campus
  campusId: String
  classroomPlanExpectedPerformances: [ClassroomPlanExpectedPerformance!]
  classroomPlanMethodologicalRoutes: [ClassroomPlanMethodologicalRoute!]
  classroomPlanPerformanceAppraisalStrategies: [ClassroomPlanPerformanceAppraisalStrategy!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  endDate: DateTime
  generalBasicLearningRights: [GeneralBasicLearningRight!]
  generalBasicLearningRightsId: [String!]
  id: ID!
  learnigs: [Learning!]
  learningsId: [String!]
  school: School
  schoolId: String
  startDate: DateTime
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ClassroomPlanConnection {
  edges: [ClassroomPlanEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ClassroomPlanEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ClassroomPlan!
}

"""The ClassroomPlanExpectedPerformance model"""
type ClassroomPlanExpectedPerformance {
  evaluativeComponent: EvaluativeComponent
  evaluativeComponentId: String
  evidenceLearnings: [EvidenceLearning!]
  evidenceLearningsId: [String!]
}

"""The ClassroomPlanMethodologicalRoute model"""
type ClassroomPlanMethodologicalRoute {
  description: String
  name: String
}

"""The ClassroomPlanPerformanceAppraisalStrategy model"""
type ClassroomPlanPerformanceAppraisalStrategy {
  description: String
  evaluativeComponent: EvaluativeComponent
  evaluativeComponentId: String
}

"""The Course model"""
type Course implements IModelCampusData {
  academicDay: AcademicDay
  academicDayId: String
  academicGrade: AcademicGrade
  academicGradeId: String
  active: Boolean
  campus: Campus
  campusId: String
  countStudent: Float
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  gradoCodSIMAT: String
  grupoSIMAT: String
  id: ID!
  jornadaSIMAT: String
  name: String
  order: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  students: [Student!]
  studentsId: [String!]
  teacher: Teacher
  teacherId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type CourseConnection {
  edges: [CourseEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type CourseEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Course!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""The Day Register"""
enum Day {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

"""The Document Type model"""
type DocumentType implements IModelData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type DocumentTypeConnection {
  edges: [DocumentTypeEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type DocumentTypeEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: DocumentType!
}

"""The EducationLevel model"""
type EducationLevel implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  entityBaseId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type EducationLevelConnection {
  edges: [EducationLevelEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type EducationLevelEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: EducationLevel!
}

"""The Email model"""
type Email implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  dateSend: DateTime
  email: String
  id: ID!
  message: String
  title: String
  to: User
  toId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type EmailConnection {
  edges: [EmailEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type EmailEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Email!
}

"""The EvaluativeComponent model"""
type EvaluativeComponent implements IModelSchoolData {
  academicAreas: [AcademicArea!]
  academicAreasId: [String!]
  academicAsignatures: [AcademicAsignature!]
  academicAsignaturesId: [String!]
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  type: EvaluativeComponentType
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
  weight: Float
}

type EvaluativeComponentConnection {
  edges: [EvaluativeComponentEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type EvaluativeComponentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: EvaluativeComponent!
}

"""The EvaluativeComponentType Register"""
enum EvaluativeComponentType {
  AREA
  ASIGNATURE
  GENERAL
}

"""The EvidenceLearning model"""
type EvidenceLearning implements IModelSchoolData {
  academicStandard: Learning
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  learning: Learning
  learningId: String
  school: School
  schoolId: String
  statement: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type EvidenceLearningConnection {
  edges: [EvidenceLearningEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type EvidenceLearningEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: EvidenceLearning!
}

"""The ExperienceLearning model"""
type ExperienceLearning implements IModelCampusData {
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  campus: Campus
  campusId: String
  closeTestDate: DateTime
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  criteria: String
  dateDelivery: DateTime
  description: String
  evaluativeComponents: [EvaluativeComponent!]
  evaluativeComponentsId: [String!]
  evidenceLearnings: [EvidenceLearning!]
  evidenceLearningsId: [String!]
  experienceLearningPerformanceLevel: [ExperienceLearningPerformanceLevel!]
  experienceLearningType: ExperienceLearningType
  experienceRecoveryPlanType: ExperienceRecoveryPlanType
  experienceType: ExperienceType
  id: ID!
  learnigs: [Learning!]
  learningsId: [String!]
  navigationMethod: NavigationMethodTestOnline
  onlineDelivery: Boolean
  openTestDate: DateTime
  school: School
  schoolId: String
  shuffleQuestions: Boolean
  title: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

"""The ExperienceLearningAverageValuation model"""
type ExperienceLearningAverageValuation implements IModelCampusData {
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  average: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  evaluativeComponent: EvaluativeComponent
  evaluativeComponentId: String
  experienceLearningType: ExperienceLearningType
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ExperienceLearningAverageValuationConnection {
  edges: [ExperienceLearningAverageValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningAverageValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearningAverageValuation!
}

"""The ExperienceLearningCoEvaluation model"""
type ExperienceLearningCoEvaluation implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  coEvaluator: Student
  coEvaluatorId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  experienceLearning: ExperienceLearning
  experienceLearningId: String
  id: ID!
  observations: String
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ExperienceLearningCoEvaluationConnection {
  edges: [ExperienceLearningCoEvaluationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningCoEvaluationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearningCoEvaluation!
}

"""The ExperienceLearningCoEvaluationValuation model"""
type ExperienceLearningCoEvaluationValuation implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  experienceLearning: ExperienceLearning
  experienceLearningId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ExperienceLearningCoEvaluationValuationConnection {
  edges: [ExperienceLearningCoEvaluationValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningCoEvaluationValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearningCoEvaluationValuation!
}

type ExperienceLearningConnection {
  edges: [ExperienceLearningEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearning!
}

"""The ExperienceLearningPerformanceLevel model"""
type ExperienceLearningPerformanceLevel {
  criteria: String
  performanceLevel: PerformanceLevel
  performanceLevelId: String
}

"""The ExperienceLearningRubricCriteria model"""
type ExperienceLearningRubricCriteria implements IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  criteria: String
  evidenceLearnig: EvidenceLearning
  evidenceLearningId: String
  experienceLearning: ExperienceLearning
  experienceLearningId: String
  experienceLearningRubricCriteriaPerformanceLevel: [ExperienceLearningRubricCriteriaPerformanceLevel!]
  id: ID!
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
  weight: Float
}

type ExperienceLearningRubricCriteriaConnection {
  edges: [ExperienceLearningRubricCriteriaEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningRubricCriteriaEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearningRubricCriteria!
}

"""The ExperienceLearningRubricCriteriaPerformanceLevel model"""
type ExperienceLearningRubricCriteriaPerformanceLevel {
  criteria: String
  performanceLevel: PerformanceLevel
  performanceLevelId: String
}

"""The ExperienceLearningRubricCriteriaValuation model"""
type ExperienceLearningRubricCriteriaValuation implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  experienceLearningRubricCriteria: ExperienceLearningRubricCriteria
  experienceLearningRubricCriteriaId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ExperienceLearningRubricCriteriaValuationConnection {
  edges: [ExperienceLearningRubricCriteriaValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningRubricCriteriaValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearningRubricCriteriaValuation!
}

"""The ExperienceLearningRubricValuation model"""
type ExperienceLearningRubricValuation implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  experienceLearning: ExperienceLearning
  experienceLearningId: String
  id: ID!
  observations: String
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ExperienceLearningRubricValuationConnection {
  edges: [ExperienceLearningRubricValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningRubricValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearningRubricValuation!
}

"""The ExperienceLearningSelfAssessmentValuation model"""
type ExperienceLearningSelfAssessmentValuation implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  experienceLearning: ExperienceLearning
  experienceLearningId: String
  id: ID!
  observations: String
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ExperienceLearningSelfAssessmentValuationConnection {
  edges: [ExperienceLearningSelfAssessmentValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningSelfAssessmentValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearningSelfAssessmentValuation!
}

"""The ExperienceLearningTraditionalValuation model"""
type ExperienceLearningTraditionalValuation implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  experienceLearning: ExperienceLearning
  experienceLearningId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ExperienceLearningTraditionalValuationConnection {
  edges: [ExperienceLearningTraditionalValuationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ExperienceLearningTraditionalValuationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ExperienceLearningTraditionalValuation!
}

"""The ExperienceLearningType Register"""
enum ExperienceLearningType {
  NORMAL
  RECOVERY
}

"""The ExperienceLearningValuation model"""
type ExperienceLearningValuation implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUserId: String
  experienceLearning: ExperienceLearning
  experienceLearningId: String
  id: ID!
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

"""The ExperienceRecoveryPlanType Register"""
enum ExperienceRecoveryPlanType {
  TRADITIONALVALUATION
}

"""The ExperienceType Register"""
enum ExperienceType {
  COEVALUATION
  SELFAPPRAISAL
  TRADITIONALVALUATION
  VALUATIONRUBRIC
}

"""The Forum model"""
type Forum implements IModelCampusData {
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  details: String
  id: ID!
  name: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ForumConnection {
  edges: [ForumEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ForumEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Forum!
}

"""The ForumInteraction model"""
type ForumInteraction implements IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  comment: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  forumQuestion: ForumQuestion
  forumQuestionId: String
  id: ID!
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ForumInteractionConnection {
  edges: [ForumInteractionEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ForumInteractionEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ForumInteraction!
}

"""The ForumQuestionQuestion model"""
type ForumQuestion implements IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  details: String
  forum: Forum
  forumId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ForumQuestionConnection {
  edges: [ForumQuestionEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ForumQuestionEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ForumQuestion!
}

"""The Gender model"""
type Gender implements IModelData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GenderConnection {
  edges: [GenderEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GenderEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Gender!
}

"""The GeneralAcademicArea model"""
type GeneralAcademicArea implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  hasDba: Boolean
  hasStandard: Boolean
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicAreaConnection {
  edges: [GeneralAcademicAreaEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicAreaEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicArea!
}

"""The GeneralAcademicAsignature model"""
type GeneralAcademicAsignature implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicArea: GeneralAcademicArea
  generalAcademicAreaId: String
  hasDba: Boolean
  hasStandard: Boolean
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicAsignatureConnection {
  edges: [GeneralAcademicAsignatureEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicAsignatureEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicAsignature!
}

"""The GeneralAcademicCycle model"""
type GeneralAcademicCycle implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicCycleConnection {
  edges: [GeneralAcademicCycleEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicCycleEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicCycle!
}

"""The GeneralAcademicGrade model"""
type GeneralAcademicGrade implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicCycle: GeneralAcademicCycle
  generalAcademicCycleId: String
  id: ID!
  name: String
  nextGeneralAcademicGradeId: String
  previousGeneralAcademicGradeId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicGradeConnection {
  edges: [GeneralAcademicGradeEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicGradeEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicGrade!
}

"""The GeneralAcademicStandard model"""
type GeneralAcademicStandard implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicAsignature: GeneralAcademicAsignature
  generalAcademicAsignatureId: String
  generalAcademicCycle: GeneralAcademicCycle
  generalAcademicCycleId: String
  id: ID!
  standard: String
  subtype: String
  type: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicStandardConnection {
  edges: [GeneralAcademicStandardEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicStandardEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicStandard!
}

"""The GeneralBasicLearningRight model"""
type GeneralBasicLearningRight implements IModelData {
  active: Boolean
  category: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  dba: String
  generalAcademicAsignature: GeneralAcademicAsignature
  generalAcademicAsignatureId: String
  generalAcademicGrade: GeneralAcademicGrade
  generalAcademicGradeId: String
  id: ID!
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralBasicLearningRightConnection {
  edges: [GeneralBasicLearningRightEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralBasicLearningRightEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralBasicLearningRight!
}

"""The GeneralPerformanceLevel model"""
type GeneralPerformanceLevel implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralPerformanceLevelConnection {
  edges: [GeneralPerformanceLevelEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralPerformanceLevelEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralPerformanceLevel!
}

"""The GradeAssignment model"""
type GradeAssignment implements IModelSchoolData {
  academicAsignature: AcademicAsignature
  academicAsignatureId: String
  academicGrade: AcademicGrade
  academicGradeId: String
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  id: ID!
  maxHourlyIntensity: Float
  minHourlyIntensity: Float
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GradeAssignmentConnection {
  edges: [GradeAssignmentEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GradeAssignmentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GradeAssignment!
}

"""The Guardian model"""
type Guardian implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  students: [Student!]
  studentsId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type GuardianConnection {
  edges: [GuardianEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GuardianEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Guardian!
}

interface IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

interface IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

interface IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

"""The Inbox model"""
type Inbox implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  dateRead: DateTime
  dateSend: DateTime
  from: User
  fromId: String
  id: ID!
  message: String
  title: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type InboxConnection {
  edges: [InboxEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type InboxEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Inbox!
}

"""The User model"""
type Jwt {
  campus: [Campus!]
  jwt: String
  lastName: String
  name: String
  profilePhoto: String
  role: Role
  roleMenus: [Menu!]
  schools: [School!]
  student: Student
  students: [Student!]
  teacher: Teacher
  userId: String
  username: String
}

"""The Learning model"""
type Learning implements IModelSchoolData {
  academicAsignature: AcademicAsignature
  academicAsignatureId: String
  academicGrade: AcademicGrade
  academicGradeId: String
  academicPeriods: [AcademicPeriod!]
  academicPeriodsId: [String!]
  academicStandard: AcademicStandard
  academicStandardId: String
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  evidenceLearnings: [EvidenceLearning!]
  generalBasicLearningRight: GeneralBasicLearningRight
  generalBasicLearningRightId: String
  id: ID!
  school: School
  schoolId: String
  statement: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type LearningConnection {
  edges: [LearningEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type LearningEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Learning!
}

"""The Menu model"""
type Menu implements IModelData {
  activateAction: Boolean
  active: Boolean
  createAction: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  id: ID!
  inactiveAction: Boolean
  isHidden: Boolean
  menuItems: [MenuItem!]
  menuItemsLogin: [MenuItem!]
  module: Module
  moduleId: String
  name: String
  order: Float
  readAction: Boolean
  roles: [Role!]
  rolesId: [String!]
  updateAction: Boolean
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type MenuConnection {
  edges: [MenuEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type MenuEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Menu!
}

"""The MenuItem model"""
type MenuItem implements IModelData {
  activateAction: Boolean
  active: Boolean
  createAction: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  id: ID!
  inactiveAction: Boolean
  isHidden: Boolean
  menu: Menu
  menuId: String
  module: Module
  moduleId: String
  name: String
  order: Float
  readAction: Boolean
  roles: [Role!]
  rolesId: [String!]
  updateAction: Boolean
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type MenuItemConnection {
  edges: [MenuItemEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type MenuItemEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: MenuItem!
}

"""The Modality model"""
type Modality implements IModelSchoolData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ModalityConnection {
  edges: [ModalityEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ModalityEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Modality!
}

"""The Module model"""
type Module implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  url: String
  version: Float
}

type ModuleConnection {
  edges: [ModuleEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ModuleEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Module!
}

"""The Municipality model"""
type Municipality implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type MunicipalityConnection {
  edges: [MunicipalityEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type MunicipalityEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Municipality!
}

type Mutation {
  changeActiveAcademicArea(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicAreaCoursePeriodValuation(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicAreaCourseYearValuation(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicAsignature(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicAsignatureCourse(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicAsignatureCoursePeriodEvidenceLearningValuation(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicAsignatureCoursePeriodValuation(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicAsignatureCourseYearValuation(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicDay(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicGrade(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicHour(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicPeriod(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicSchedule(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicStandard(active: Boolean!, id: String!): Boolean!
  changeActiveAuditLogin(active: Boolean!, id: String!): Boolean!
  changeActiveAverageAcademicPeriodStudent(active: Boolean!, id: String!): Boolean!
  changeActiveAverageAcademicYearCourse(active: Boolean!, id: String!): Boolean!
  changeActiveAverageAcademicYearStudent(active: Boolean!, id: String!): Boolean!
  changeActiveCampus(active: Boolean!, id: String!): Boolean!
  changeActiveCampusAdministrator(active: Boolean!, id: String!): Boolean!
  changeActiveCampusCoordinator(active: Boolean!, id: String!): Boolean!
  changeActiveClassroomPlan(active: Boolean!, id: String!): Boolean!
  changeActiveCourse(active: Boolean!, id: String!): Boolean!
  changeActiveDocumentType(active: Boolean!, id: String!): Boolean!
  changeActiveEducationLevel(active: Boolean!, id: String!): Boolean!
  changeActiveEmail(active: Boolean!, id: String!): Boolean!
  changeActiveEvaluativeComponent(active: Boolean!, id: String!): Boolean!
  changeActiveEvidenceLearning(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearning(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearningAverageValuation(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearningCoEvaluation(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearningCoEvaluationValuation(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearningRubricCriteria(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearningRubricCriteriaValuation(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearningRubricValuation(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearningSelfAssessmentValuation(active: Boolean!, id: String!): Boolean!
  changeActiveExperienceLearningTraditionalValuation(active: Boolean!, id: String!): Boolean!
  changeActiveForum(active: Boolean!, id: String!): Boolean!
  changeActiveForumInteraction(active: Boolean!, id: String!): Boolean!
  changeActiveForumQuestion(active: Boolean!, id: String!): Boolean!
  changeActiveGender(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicArea(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicAsignature(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicCycle(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicGrade(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicStandard(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralBasicLearningRight(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralPerformanceLevel(active: Boolean!, id: String!): Boolean!
  changeActiveGradeAssignment(active: Boolean!, id: String!): Boolean!
  changeActiveGuardian(active: Boolean!, id: String!): Boolean!
  changeActiveInbox(active: Boolean!, id: String!): Boolean!
  changeActiveLearning(active: Boolean!, id: String!): Boolean!
  changeActiveMenu(active: Boolean!, id: String!): Boolean!
  changeActiveMenuItem(active: Boolean!, id: String!): Boolean!
  changeActiveModality(active: Boolean!, id: String!): Boolean!
  changeActiveModule(active: Boolean!, id: String!): Boolean!
  changeActiveMunicipality(active: Boolean!, id: String!): Boolean!
  changeActiveNotification(active: Boolean!, id: String!): Boolean!
  changeActiveObserverAnnotationType(active: Boolean!, id: String!): Boolean!
  changeActivePerformanceLevel(active: Boolean!, id: String!): Boolean!
  changeActiveQuestionBankTestOnline(active: Boolean!, id: String!): Boolean!
  changeActiveQuestionCategoryTestOnline(active: Boolean!, id: String!): Boolean!
  changeActiveQuestionTestOnline(active: Boolean!, id: String!): Boolean!
  changeActiveRole(active: Boolean!, id: String!): Boolean!
  changeActiveSchool(active: Boolean!, id: String!): Boolean!
  changeActiveSchoolAdministrative(active: Boolean!, id: String!): Boolean!
  changeActiveSchoolAdministrator(active: Boolean!, id: String!): Boolean!
  changeActiveSchoolConfiguration(active: Boolean!, id: String!): Boolean!
  changeActiveSchoolYear(active: Boolean!, id: String!): Boolean!
  changeActiveSpecialty(active: Boolean!, id: String!): Boolean!
  changeActiveStudent(active: Boolean!, id: String!): Boolean!
  changeActiveStudentAttendance(active: Boolean!, id: String!): Boolean!
  changeActiveStudentBehaviour(active: Boolean!, id: String!): Boolean!
  changeActiveStudentObserverAnnotation(active: Boolean!, id: String!): Boolean!
  changeActiveStudentYearBehaviour(active: Boolean!, id: String!): Boolean!
  changeActiveTeacher(active: Boolean!, id: String!): Boolean!
  changeActiveUser(active: Boolean!, id: String!): Boolean!
  changeActiveVideoTutorial(active: Boolean!, id: String!): Boolean!
  changePasswordUser(id: String!, password: String!): Boolean!
  createAcademicArea(data: NewAcademicArea!): AcademicArea!
  createAcademicAreaCoursePeriodValuation(data: NewAcademicAreaCoursePeriodValuation!): AcademicAreaCoursePeriodValuation!
  createAcademicAreaCoursePeriodValuationStudent(academicAsignatureCourseId: String!, academicPeriodId: String!, studentId: String!): Boolean!
  createAcademicAreaCourseYearValuation(data: NewAcademicAreaCourseYearValuation!): AcademicAreaCourseYearValuation!
  createAcademicAsignature(data: NewAcademicAsignature!): AcademicAsignature!
  createAcademicAsignatureCourse(data: NewAcademicAsignatureCourse!): AcademicAsignatureCourse!
  createAcademicAsignatureCoursePeriodEvidenceLearningValuation(data: NewAcademicAsignatureCoursePeriodEvidenceLearningValuation!): AcademicAsignatureCoursePeriodEvidenceLearningValuation!
  createAcademicAsignatureCoursePeriodValuation(data: NewAcademicAsignatureCoursePeriodValuation!): AcademicAsignatureCoursePeriodValuation!
  createAcademicAsignatureCoursePeriodValuationStudent(academicAsignatureCourseId: String!, academicPeriodId: String!, experienceLearningType: ExperienceLearningType!, studentId: String!): Boolean!
  createAcademicAsignatureCoursePeriodValuationStudentBulk(academicAsignatureCourseId: String!, academicPeriodId: String!, experienceLearningType: ExperienceLearningType!, studentId: String!): Boolean!
  createAcademicAsignatureCoursePeriodValuationStudents(academicAsignatureCourseId: String!, academicPeriodId: String!, experienceLearningType: ExperienceLearningType!, schoolId: String!): Boolean!
  createAcademicAsignatureCourseYearValuation(data: NewAcademicAsignatureCourseYearValuation!): AcademicAsignatureCourseYearValuation!
  createAcademicDay(data: NewAcademicDay!): AcademicDay!
  createAcademicGrade(data: NewAcademicGrade!): AcademicGrade!
  createAcademicHour(data: NewAcademicHour!): AcademicHour!
  createAcademicPeriod(data: NewAcademicPeriod!): AcademicPeriod!
  createAcademicSchedule(data: NewAcademicSchedule!): AcademicSchedule!
  createAcademicStandard(data: NewAcademicStandard!): AcademicStandard!
  createAllInitialsAcademicDay(schoolId: String!, schoolYearId: String!): Boolean!
  createAllInitialsCampusAdministrators: Boolean!
  createAllInitialsCourse(schoolId: String!, schoolYearId: String!): Boolean!
  createAllInitialsSchoolAdministratives: Boolean!
  createAllInitialsSchoolAdministrators: Boolean!
  createAllInitialsStudents(schoolId: String!, schoolYearId: String!): Boolean!
  createAllInitialsTeachers: Boolean!
  createAuditLogin(data: NewAuditLogin!): AuditLogin!
  createAverageAcademicPeriodStudent(data: NewAverageAcademicPeriodStudent!): AverageAcademicPeriodStudent!
  createAverageAcademicYearCourse(data: NewAverageAcademicYearCourse!): AverageAcademicYearCourse!
  createAverageAcademicYearStudent(data: NewAverageAcademicYearStudent!): AverageAcademicYearStudent!
  createAverageBehaviourYearValuationCourse(courseId: String!, schoolYearId: String!): Boolean!
  createAveragePeriodValuationCourse(academicPeriodId: String!, courseId: String!): Boolean!
  createAveragePeriodValuationStudent(academicPeriodId: String!, courseId: String!, studentId: String!): Boolean!
  createAverageYearValuationCourse(courseId: String!, schoolYearId: String!): Boolean!
  createAverageYearValuationStudent(courseId: String!, schoolId: String!, schoolYearId: String!, studentId: String!): Boolean!
  createBackup: Boolean!
  createCampus(data: NewCampus!): Campus!
  createCampusAdministrator(data: NewCampusAdministrator!): CampusAdministrator!
  createCampusCoordinator(data: NewCampusCoordinator!): CampusCoordinator!
  createClassroomPlan(data: NewClassroomPlan!): ClassroomPlan!
  createCodeSchoolConfigurations(code: String!, valueNumber: Float!, valueString: String!): Boolean!
  createCourse(data: NewCourse!): Course!
  createDocumentType(data: NewDocumentType!): DocumentType!
  createEducationLevel(data: NewEducationLevel!): EducationLevel!
  createEmail(data: NewEmail!): Email!
  createEvaluativeComponent(data: NewEvaluativeComponent!): EvaluativeComponent!
  createEvidenceLearning(data: NewEvidenceLearning!): EvidenceLearning!
  createExperienceLearning(data: NewExperienceLearning!): ExperienceLearning!
  createExperienceLearningAverageValuation(data: NewExperienceLearningAverageValuation!): ExperienceLearningAverageValuation!
  createExperienceLearningAverageValuationStudent(academicAsignatureCourseId: String!, academicPeriodId: String!, evaluativeComponentId: String!, experienceLearningType: ExperienceLearningType!, studentId: String!): Boolean!
  createExperienceLearningAverageValuationStudents(academicAsignatureCourseId: String!, academicPeriodId: String!, evaluativeComponentId: String!, experienceLearningType: ExperienceLearningType!): Boolean!
  createExperienceLearningCoEvaluation(data: NewExperienceLearningCoEvaluation!): ExperienceLearningCoEvaluation!
  createExperienceLearningCoEvaluationStudents(id: String!): Boolean!
  createExperienceLearningCoEvaluationValuation(data: NewExperienceLearningCoEvaluationValuation!): ExperienceLearningCoEvaluationValuation!
  createExperienceLearningCoEvaluationValuationStudents(id: String!): Boolean!
  createExperienceLearningRubricCriteria(data: NewExperienceLearningRubricCriteria!): ExperienceLearningRubricCriteria!
  createExperienceLearningRubricCriteriaValuation(data: NewExperienceLearningRubricCriteriaValuation!): ExperienceLearningRubricCriteriaValuation!
  createExperienceLearningRubricStudents(id: String!): Boolean!
  createExperienceLearningRubricValuation(data: NewExperienceLearningRubricValuation!): ExperienceLearningRubricValuation!
  createExperienceLearningSelfAssessmentValuation(data: NewExperienceLearningSelfAssessmentValuation!): ExperienceLearningSelfAssessmentValuation!
  createExperienceLearningSelfAssessmentValuationStudents(id: String!): Boolean!
  createExperienceLearningTraditionalValuation(data: NewExperienceLearningTraditionalValuation!): ExperienceLearningTraditionalValuation!
  createExperienceLearningTraditionalValuationStudents(id: String!): Boolean!
  createForum(data: NewForum!): Forum!
  createForumInteraction(data: NewForumInteraction!): ForumInteraction!
  createForumQuestion(data: NewForumQuestion!): ForumQuestion!
  createGender(data: NewGender!): Gender!
  createGeneralAcademicArea(data: NewGeneralAcademicArea!): GeneralAcademicArea!
  createGeneralAcademicAsignature(data: NewGeneralAcademicAsignature!): GeneralAcademicAsignature!
  createGeneralAcademicCycle(data: NewGeneralAcademicCycle!): GeneralAcademicCycle!
  createGeneralAcademicGrade(data: NewGeneralAcademicGrade!): GeneralAcademicGrade!
  createGeneralAcademicStandard(data: NewGeneralAcademicStandard!): GeneralAcademicStandard!
  createGeneralBasicLearningRight(data: NewGeneralBasicLearningRight!): GeneralBasicLearningRight!
  createGeneralPerformanceLevel(data: NewGeneralPerformanceLevel!): GeneralPerformanceLevel!
  createGradeAssignment(data: NewGradeAssignment!): GradeAssignment!
  createGuardian(data: NewGuardian!): Guardian!
  createInbox(data: NewInbox!): Inbox!
  createLearning(data: NewLearning!): Learning!
  createMenu(data: NewMenu!): Menu!
  createMenuItem(data: NewMenuItem!): MenuItem!
  createModality(data: NewModality!): Modality!
  createModule(data: NewModule!): Module!
  createMunicipality(data: NewMunicipality!): Municipality!
  createNotification(data: NewNotification!): Notification!
  createObserverAnnotationType(data: NewObserverAnnotationType!): ObserverAnnotationType!
  createPerformanceLevel(data: NewPerformanceLevel!): PerformanceLevel!
  createPeriodStudentBehaviour(academicPeriodId: String!, courseId: String!): Boolean!
  createPeriodStudentObserverAnnotation(academicPeriodId: String!, courseId: String!): Boolean!
  createPeriodStudentYearBehaviour(courseId: String!, schoolYearId: String!): Boolean!
  createQuestionBankTestOnline(data: NewQuestionBankTestOnline!): QuestionBankTestOnline!
  createQuestionCategoryTestOnline(data: NewQuestionCategoryTestOnline!): QuestionCategoryTestOnline!
  createQuestionTestOnline(data: NewQuestionTestOnline!): QuestionTestOnline!
  createRole(data: NewRole!): Role!
  createSchool(data: NewSchool!): School!
  createSchoolAdministrative(data: NewSchoolAdministrative!): SchoolAdministrative!
  createSchoolAdministrator(data: NewSchoolAdministrator!): SchoolAdministrator!
  createSchoolConfiguration(data: NewSchoolConfiguration!): SchoolConfiguration!
  createSchoolYear(data: NewSchoolYear!): SchoolYear!
  createSchoolYearsDaneCode: Boolean!
  createSpecialty(data: NewSpecialty!): Specialty!
  createStudent(data: NewStudent!): Student!
  createStudentAttendance(data: NewStudentAttendance!): StudentAttendance!
  createStudentBehaviour(data: NewStudentBehaviour!): StudentBehaviour!
  createStudentObserverAnnotation(data: NewStudentObserverAnnotation!): StudentObserverAnnotation!
  createStudentYearBehaviour(data: NewStudentYearBehaviour!): StudentYearBehaviour!
  createTeacher(data: NewTeacher!): Teacher!
  createUser(data: NewUser!): User!
  createVideoTutorial(data: NewVideoTutorial!): VideoTutorial!
  deleteAcademicArea(id: String!): Boolean!
  deleteAcademicAreaCoursePeriodValuation(id: String!): Boolean!
  deleteAcademicAreaCourseYearValuation(id: String!): Boolean!
  deleteAcademicAsignature(id: String!): Boolean!
  deleteAcademicAsignatureCourse(id: String!): Boolean!
  deleteAcademicAsignatureCoursePeriodEvidenceLearningValuation(id: String!): Boolean!
  deleteAcademicAsignatureCoursePeriodValuation(id: String!): Boolean!
  deleteAcademicAsignatureCourseYearValuation(id: String!): Boolean!
  deleteAcademicDay(id: String!): Boolean!
  deleteAcademicGrade(id: String!): Boolean!
  deleteAcademicHour(id: String!): Boolean!
  deleteAcademicPeriod(id: String!): Boolean!
  deleteAcademicSchedule(id: String!): Boolean!
  deleteAcademicStandard(id: String!): Boolean!
  deleteAverageAcademicPeriodStudent(id: String!): Boolean!
  deleteAverageAcademicYearCourse(id: String!): Boolean!
  deleteAverageAcademicYearStudent(id: String!): Boolean!
  deleteCampus(id: String!): Boolean!
  deleteCampusAdministrator(id: String!): Boolean!
  deleteCampusCoordinator(id: String!): Boolean!
  deleteClassroomPlan(id: String!): Boolean!
  deleteCourse(id: String!): Boolean!
  deleteDocumentType(id: String!): Boolean!
  deleteEducationLevel(id: String!): Boolean!
  deleteEmail(id: String!): Boolean!
  deleteEvaluativeComponent(id: String!): Boolean!
  deleteEvidenceLearning(id: String!): Boolean!
  deleteExperienceLearning(id: String!): Boolean!
  deleteExperienceLearningAverageValuation(id: String!): Boolean!
  deleteExperienceLearningCoEvaluation(id: String!): Boolean!
  deleteExperienceLearningCoEvaluationValuation(id: String!): Boolean!
  deleteExperienceLearningRubricCriteria(id: String!): Boolean!
  deleteExperienceLearningRubricCriteriaValuation(id: String!): Boolean!
  deleteExperienceLearningRubricValuation(id: String!): Boolean!
  deleteExperienceLearningSelfAssessmentValuation(id: String!): Boolean!
  deleteExperienceLearningTraditionalValuation(id: String!): Boolean!
  deleteForum(id: String!): Boolean!
  deleteForumInteraction(id: String!): Boolean!
  deleteForumQuestion(id: String!): Boolean!
  deleteGender(id: String!): Boolean!
  deleteGeneralAcademicArea(id: String!): Boolean!
  deleteGeneralAcademicAsignature(id: String!): Boolean!
  deleteGeneralAcademicCycle(id: String!): Boolean!
  deleteGeneralAcademicGrade(id: String!): Boolean!
  deleteGeneralAcademicStandard(id: String!): Boolean!
  deleteGeneralBasicLearningRight(id: String!): Boolean!
  deleteGeneralPerformanceLevel(id: String!): Boolean!
  deleteGradeAssignment(id: String!): Boolean!
  deleteGuardian(id: String!): Boolean!
  deleteInbox(id: String!): Boolean!
  deleteLearning(id: String!): Boolean!
  deleteMenu(id: String!): Boolean!
  deleteMenuItem(id: String!): Boolean!
  deleteModality(id: String!): Boolean!
  deleteModule(id: String!): Boolean!
  deleteMunicipality(id: String!): Boolean!
  deleteNotification(id: String!): Boolean!
  deleteObserverAnnotationType(id: String!): Boolean!
  deletePerformanceLevel(id: String!): Boolean!
  deleteQuestionBankTestOnline(id: String!): Boolean!
  deleteQuestionCategoryTestOnline(id: String!): Boolean!
  deleteQuestionTestOnline(id: String!): Boolean!
  deleteRole(id: String!): Boolean!
  deleteSchool(id: String!): Boolean!
  deleteSchoolAdministrative(id: String!): Boolean!
  deleteSchoolAdministrator(id: String!): Boolean!
  deleteSchoolConfiguration(id: String!): Boolean!
  deleteSchoolYear(id: String!): Boolean!
  deleteSpecialty(id: String!): Boolean!
  deleteStudent(id: String!): Boolean!
  deleteStudentAttendance(id: String!): Boolean!
  deleteStudentBehaviour(id: String!): Boolean!
  deleteStudentObserverAnnotation(id: String!): Boolean!
  deleteStudentYearBehaviour(id: String!): Boolean!
  deleteTeacher(id: String!): Boolean!
  deleteUser(id: String!): Boolean!
  deleteVideoTutorial(id: String!): Boolean!
  fixAcademicAsignatureCourseSchoolSchoolYear2023: Boolean!
  fixAcademicAsignatureCourseSchoolYear: Boolean!
  fixAcademicAsignatureCourseTeacherV2(schoolYearId: String, teacherId: String!): Boolean!
  fixAcademicAsignatureWithDeleteAcademicArea: Boolean!
  fixAllAcademicAreaSchoolAndSchoolYear: Boolean!
  fixAllAcademicAsignatureCourseSchoolAndSchoolYear: Boolean!
  fixAllAcademicAsignatureSchoolAndSchoolYear: Boolean!
  fixAllAcademicDaySchoolAndSchoolYear: Boolean!
  fixAllAcademicGradeSchoolAndSchoolYear: Boolean!
  fixAllAcademicHourSchoolAndSchoolYear: Boolean!
  fixAllCourseSchoolAndSchoolYear: Boolean!
  fixAllEducationLevelSchoolAndSchoolYear: Boolean!
  fixAllEvaluativeComponentSchoolAndSchoolYear: Boolean!
  fixAllGradeAssignmentSchoolAndSchoolYear: Boolean!
  fixAllModalitySchoolAndSchoolYear: Boolean!
  fixAllPerformanceLevelSchoolAndSchoolYear: Boolean!
  fixAllSpecialtySchoolAndSchoolYear: Boolean!
  fixAllSudentSchoolAndSchoolYear: Boolean!
  fixAllTeacherSchoolAndSchoolYear: Boolean!
  fixImportCourseSchoolYearId(schoolYearId: String!): Boolean!
  fixSchoolIdAndSchoolYearId: Boolean!
  fixStudentCourseYearOld(schoolId: String!, schoolYearId: String!): Boolean!
  generateCertificateFinalReportCourse(format: String!, id: String!, schoolId: String!, schoolYearId: String!, studentId: String): String!
  generatePerformanceFinalReportCourse(format: String!, id: String!, schoolId: String!, schoolYearId: String!, studentId: String): String!
  generatePerformanceLevelExample(id: String!): Boolean!
  generatePerformanceLevelExample2(id: String!): Boolean!
  generatePerformanceReportCourse(academicPeriodId: String!, format: String!, id: String!, schoolId: String!, schoolYearId: String!, studentId: String): String!
  importAcademicAreaSchoolYearId(asignature: Boolean!, newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importAcademicAsignatureSchoolYearId(newAcademicAreaId: String!, newSchoolYearId: String!, oldAcademicAreaId: String!, schoolId: String!): Boolean!
  importAcademicDaySchoolYearId(academicHour: Boolean!, newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importAcademicGradeSchoolYearId(course: Boolean!, newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importAcademicHourSchoolYearId(newAcademicDayId: String!, newSchoolYearId: String!, oldAcademicDayId: String!, schoolId: String!): Boolean!
  importAcademicPeriodSchoolYearId(newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importCourseSchoolYearId(newAcademicGradeId: String!, newSchoolYearId: String!, oldAcademicGradeId: String!, schoolId: String!): Boolean!
  importDataSchoolInactive(schoolId: String!): Boolean!
  importEducationLevelSchoolYearId(newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importEvaluativeComponentSchoolYearId(newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importGradeAssignmentSchoolYear: Boolean!
  importGradeAssignmentSchoolYearId(academicAsignatureCourse: Boolean!, newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importModalitySchoolYearId(newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!, speciality: Boolean!): Boolean!
  importPerformanceLevelSchoolYearId(newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importSchoolConfigurationSchoolYearId(newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  importSpecialitySchoolYearId(newModalityId: String!, newSchoolYearId: String!, oldModalityId: String!, schoolId: String!): Boolean!
  importStudentSchoolYearId(newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!, studentNoPromoted: Boolean!, studentPromoted: Boolean!): Boolean!
  importTeacherSchoolYearId(newSchoolYearId: String!, oldSchoolYearId: String!, schoolId: String!): Boolean!
  login(password: String!, username: String!): Jwt!
  loginSyncOffline(password: String!, username: String!): Boolean!
  resetPasswordUser(id: String!): Boolean!
  schoolImgPrincipalSignatureUploadImage(file: Upload, id: String!): Boolean!
  schoolImgSecretarySignatureUploadImage(file: Upload, id: String!): Boolean!
  schoolLogoUploadImage(file: Upload, id: String!): Boolean!
  singleUpload(file: Upload, id: String!): Boolean!
  updateAcademicArea(data: NewAcademicArea!, id: String!): AcademicArea!
  updateAcademicAreaAcademicAsignatureSchoolYearId(schoolId: String!, schoolYearId: String!): Boolean!
  updateAcademicAreaCoursePeriodValuation(data: NewAcademicAreaCoursePeriodValuation!, id: String!): AcademicAreaCoursePeriodValuation!
  updateAcademicAreaCourseYearValuation(data: NewAcademicAreaCourseYearValuation!, id: String!): AcademicAreaCourseYearValuation!
  updateAcademicAsignature(data: NewAcademicAsignature!, id: String!): AcademicAsignature!
  updateAcademicAsignatureCourse(data: NewAcademicAsignatureCourse!, id: String!): AcademicAsignatureCourse!
  updateAcademicAsignatureCourseHourltIntensity(data: NewAcademicAsignatureCourse!, id: String!): AcademicAsignatureCourse!
  updateAcademicAsignatureCoursePeriodEvidenceLearningValuation(data: NewAcademicAsignatureCoursePeriodEvidenceLearningValuation!, id: String!): AcademicAsignatureCoursePeriodEvidenceLearningValuation!
  updateAcademicAsignatureCoursePeriodValuation(data: NewAcademicAsignatureCoursePeriodValuation!, id: String!): AcademicAsignatureCoursePeriodValuation!
  updateAcademicAsignatureCourseYearValuation(data: NewAcademicAsignatureCourseYearValuation!, id: String!): AcademicAsignatureCourseYearValuation!
  updateAcademicDay(data: NewAcademicDay!, id: String!): AcademicDay!
  updateAcademicGrade(data: NewAcademicGrade!, id: String!): AcademicGrade!
  updateAcademicHour(data: NewAcademicHour!, id: String!): AcademicHour!
  updateAcademicPeriod(data: NewAcademicPeriod!, id: String!): AcademicPeriod!
  updateAcademicSchedule(data: NewAcademicSchedule!, id: String!): AcademicSchedule!
  updateAcademicStandard(data: NewAcademicStandard!, id: String!): AcademicStandard!
  updateAllAcademicDaySchoolId(schoolId: String!): Boolean!
  updateAllAverageStudentCoursePeriod(academicPeriodId: String!, courseId: String!): Boolean!
  updateAllIStudentsName: Boolean!
  updateAllStudentAcademicAsignatureCoursePeriodValuation(academicAsignatureCourseId: String!, academicPeriodId: String!, experienceLearningType: ExperienceLearningType!): Boolean!
  updateAllStudentCoursePeriodValuation(academicPeriodId: String!, courseId: String!, experienceLearningType: ExperienceLearningType!): Boolean!
  updateAllStudentCourseYearValuation(courseId: String!, schoolId: String!, schoolYearId: String!): Boolean!
  updateAllStudentGradePeriodValuation(academicGradeId: String!, academicPeriodId: String!, experienceLearningType: ExperienceLearningType!): Boolean!
  updateAllStudentGradeYearValuation(academicGradeId: String!, schoolId: String!, schoolYearId: String!): Boolean!
  updateAllStudentSchoolPeriodValuation(academicPeriodId: String!, experienceLearningType: ExperienceLearningType!, schoolId: String!): Boolean!
  updateAssessmentExperienceLearningRubricValuation(id: String!): ExperienceLearningRubricValuation!
  updateAuditLogin(data: NewAuditLogin!, id: String!): AuditLogin!
  updateAverageAcademicPeriodStudent(data: NewAverageAcademicPeriodStudent!, id: String!): AverageAcademicPeriodStudent!
  updateAverageAcademicYearCourse(data: NewAverageAcademicYearCourse!, id: String!): AverageAcademicYearCourse!
  updateAverageAcademicYearStudent(data: NewAverageAcademicYearStudent!, id: String!): AverageAcademicYearStudent!
  updateCampus(data: NewCampus!, id: String!): Campus!
  updateCampusAdministrator(data: NewCampusAdministrator!, id: String!): CampusAdministrator!
  updateCampusCoordinator(data: NewCampusCoordinator!, id: String!): CampusCoordinator!
  updateClassroomPlan(data: NewClassroomPlan!, id: String!): ClassroomPlan!
  updateCodeStudentsAllCourses: Boolean!
  updateCodeStudentsCourse(id: String!): Boolean!
  updateCodeStudentsCoursesAcademicGrade(id: String!): Boolean!
  updateCourse(data: NewCourse!, id: String!): Course!
  updateDataSimat(schoolId: String!, schoolYearId: String!): Boolean!
  updateDocumentType(data: NewDocumentType!, id: String!): DocumentType!
  updateEducationLevel(data: NewEducationLevel!, id: String!): EducationLevel!
  updateEmail(data: NewEmail!, id: String!): Email!
  updateEndPeriod: Boolean!
  updateEvaluativeComponent(data: NewEvaluativeComponent!, id: String!): EvaluativeComponent!
  updateEvidenceLearning(data: NewEvidenceLearning!, id: String!): EvidenceLearning!
  updateExperienceLearning(data: NewExperienceLearning!, id: String!): ExperienceLearning!
  updateExperienceLearningAverageValuation(data: NewExperienceLearningAverageValuation!, id: String!): ExperienceLearningAverageValuation!
  updateExperienceLearningCoEvaluation(data: NewExperienceLearningCoEvaluation!, id: String!): ExperienceLearningCoEvaluation!
  updateExperienceLearningCoEvaluationValuation(data: NewExperienceLearningCoEvaluationValuation!, id: String!): ExperienceLearningCoEvaluationValuation!
  updateExperienceLearningRubricCriteria(data: NewExperienceLearningRubricCriteria!, id: String!): ExperienceLearningRubricCriteria!
  updateExperienceLearningRubricCriteriaValuation(data: NewExperienceLearningRubricCriteriaValuation!, id: String!): ExperienceLearningRubricCriteriaValuation!
  updateExperienceLearningRubricValuation(data: NewExperienceLearningRubricValuation!, id: String!): ExperienceLearningRubricValuation!
  updateExperienceLearningSelfAssessmentValuation(data: NewExperienceLearningSelfAssessmentValuation!, id: String!): ExperienceLearningSelfAssessmentValuation!
  updateExperienceLearningTraditionalValuation(data: NewExperienceLearningTraditionalValuation!, id: String!): ExperienceLearningTraditionalValuation!
  updateForum(data: NewForum!, id: String!): Forum!
  updateForumInteraction(data: NewForumInteraction!, id: String!): ForumInteraction!
  updateForumQuestion(data: NewForumQuestion!, id: String!): ForumQuestion!
  updateGender(data: NewGender!, id: String!): Gender!
  updateGeneralAcademicArea(data: NewGeneralAcademicArea!, id: String!): GeneralAcademicArea!
  updateGeneralAcademicAsignature(data: NewGeneralAcademicAsignature!, id: String!): GeneralAcademicAsignature!
  updateGeneralAcademicCycle(data: NewGeneralAcademicCycle!, id: String!): GeneralAcademicCycle!
  updateGeneralAcademicGrade(data: NewGeneralAcademicGrade!, id: String!): GeneralAcademicGrade!
  updateGeneralAcademicStandard(data: NewGeneralAcademicStandard!, id: String!): GeneralAcademicStandard!
  updateGeneralBasicLearningRight(data: NewGeneralBasicLearningRight!, id: String!): GeneralBasicLearningRight!
  updateGeneralPerformanceLevel(data: NewGeneralPerformanceLevel!, id: String!): GeneralPerformanceLevel!
  updateGradeAcademicDayAllInitialsCourse(schoolId: String!, schoolYearId: String!): Boolean!
  updateGradeAllInitialsCourse(schoolId: String!, schoolYearId: String!): Boolean!
  updateGradeAssignment(data: NewGradeAssignment!, id: String!): GradeAssignment!
  updateGradeAssignmentSchoolYear: Boolean!
  updateGuardian(data: NewGuardian!, id: String!): Guardian!
  updateInbox(data: NewInbox!, id: String!): Inbox!
  updateLearning(data: NewLearning!, id: String!): Learning!
  updateMenu(data: NewMenu!, id: String!): Menu!
  updateMenuItem(data: NewMenuItem!, id: String!): MenuItem!
  updateModality(data: NewModality!, id: String!): Modality!
  updateModule(data: NewModule!, id: String!): Module!
  updateMunicipality(data: NewMunicipality!, id: String!): Municipality!
  updateNotification(data: NewNotification!, id: String!): Notification!
  updateObserverAnnotationType(data: NewObserverAnnotationType!, id: String!): ObserverAnnotationType!
  updatePerformanceLevel(data: NewPerformanceLevel!, id: String!): PerformanceLevel!
  updateQuestionBankTestOnline(data: NewQuestionBankTestOnline!, id: String!): QuestionBankTestOnline!
  updateQuestionCategoryTestOnline(data: NewQuestionCategoryTestOnline!, id: String!): QuestionCategoryTestOnline!
  updateQuestionTestOnline(data: NewQuestionTestOnline!, id: String!): QuestionTestOnline!
  updateRole(data: NewRole!, id: String!): Role!
  updateSchool(data: NewSchool!, id: String!): School!
  updateSchoolAdministrative(data: NewSchoolAdministrative!, id: String!): SchoolAdministrative!
  updateSchoolAdministrator(data: NewSchoolAdministrator!, id: String!): SchoolAdministrator!
  updateSchoolConfiguration(data: NewSchoolConfiguration!, id: String!): SchoolConfiguration!
  updateSchoolYear(data: NewSchoolYear!, id: String!): SchoolYear!
  updateSchoolYearAllTeacher: Boolean!
  updateSpecialty(data: NewSpecialty!, id: String!): Specialty!
  updateStudent(data: NewStudent!, id: String!): Student!
  updateStudentAttendance(data: NewStudentAttendance!, id: String!): StudentAttendance!
  updateStudentBehaviour(data: NewStudentBehaviour!, id: String!): StudentBehaviour!
  updateStudentObserverAnnotation(data: NewStudentObserverAnnotation!, id: String!): StudentObserverAnnotation!
  updateStudentYearBehaviour(data: NewStudentYearBehaviour!, id: String!): StudentYearBehaviour!
  updateStudentsAllInitialsCourse: Boolean!
  updateTeacher(data: NewTeacher!, id: String!): Teacher!
  updateUser(data: NewUser!, id: String!): User!
  updateVideoTutorial(data: NewVideoTutorial!, id: String!): VideoTutorial!
  updateWithDaneSchoolBulk: Boolean!
  userProfileUploadImage(file: Upload, id: String!): Boolean!
  userSignatureUploadImage(file: Upload, id: String!): Boolean!
}

"""The NavigationMethodTestOnline Register"""
enum NavigationMethodTestOnline {
  FREE
  SEQUENTIAL
}

input NewAcademicArea {
  abbreviation: String
  academicGradeId: [String!]
  generalAcademicAreaId: String
  isAverage: Boolean
  name: String
  order: Float
  schoolId: String
  schoolYearId: String
}

input NewAcademicAreaCoursePeriodValuation {
  academicAreaId: String
  academicPeriodId: String
  assessment: Float
  performanceLevelId: String
  studentId: String
  valuationType: ValuationType
}

input NewAcademicAreaCourseYearValuation {
  academicAreaId: String
  assessment: Float
  performanceLevelId: String
  schoolYearId: String
  studentId: String
  valuationType: ValuationType
}

input NewAcademicAsignature {
  abbreviation: String
  academicAreaId: String
  academicGradeId: [String!]
  code: String
  generalAcademicAsignatureId: String
  maxWeight: Float
  minWeight: Float
  name: String
  order: Float
  schoolId: String
  schoolYearId: String
}

input NewAcademicAsignatureCourse {
  academicAsignatureId: String
  campusId: String
  courseId: String
  gradeAssignmentId: String
  hourlyIntensity: Float
  schoolId: String
  schoolYearId: String
  teacherId: String
  weight: Float
}

input NewAcademicAsignatureCoursePeriodEvidenceLearningValuation {
  academicAsignatureCourseId: String
  academicPeriodId: String
  assessment: Float
  evidenceLearningId: String
  performanceLevelId: String
  studentId: String
}

input NewAcademicAsignatureCoursePeriodValuation {
  academicAsignatureCourseId: String
  academicPeriodId: String
  assessment: Float
  performanceLevelId: String
  studentId: String
  valuationType: ValuationType
}

input NewAcademicAsignatureCourseYearValuation {
  academicAsignatureCourseId: String
  assessment: Float
  performanceLevelId: String
  schoolYearId: String
  studentId: String
  valuationType: ValuationType
}

input NewAcademicDay {
  campusId: String
  day: [Day!]
  name: String
  schoolId: String
  schoolYearId: String
}

input NewAcademicGrade {
  educationLevelId: String
  generalAcademicCycleId: String
  generalAcademicGradeId: String
  name: String
  schoolId: String
  schoolYearId: String
  specialtyId: String
}

input NewAcademicHour {
  academicDayId: String
  campusId: String
  endTime: String
  order: Float
  schoolId: String
  schoolYearId: String
  startTime: String
}

input NewAcademicPeriod {
  endDate: DateTime
  endDateRecovery: DateTime
  name: String
  order: Float
  schoolId: String
  schoolYearId: String
  startDate: DateTime
  startDateRecovery: DateTime
  weight: Float
}

input NewAcademicSchedule {
  academicAsignatureCourseId: String
  campusId: String
  courseId: String
  day: String
  endAcademicHourId: String
  startAcademicHourId: String
  teacherId: String
}

input NewAcademicStandard {
  academicAsignatureId: String
  academicGradeId: String
  generalAcademicStandardId: String
  schoolId: String
  standard: String
}

input NewAuditLogin {
  auth: Boolean
  userAgent: String
  userId: String
  userIp: String
  userPort: String
  username: String
}

input NewAverageAcademicPeriodStudent {
  academicPeriodId: String
  assessment: Float
  courseId: String
  performanceLevelId: String
  score: Float
  studentId: String
}

input NewAverageAcademicYearCourse {
  assessment: Float
  courseId: String
  performanceLevelId: String
  schoolYearId: String
}

input NewAverageAcademicYearStudent {
  assessment: Float
  courseId: String
  performanceLevelId: String
  promoted: Boolean
  schoolYearId: String
  score: Float
  studentId: String
}

input NewCampus {
  consecutive: String
  daneCodeCampus: String
  name: String
  schoolId: String
}

input NewCampusAdministrator {
  campusId: [String!]
  newUser: NewUser
  schoolId: [String!]
  userId: String
}

input NewCampusCoordinator {
  campusId: [String!]
  newUser: NewUser
  schoolId: [String!]
  userId: String
}

input NewClassroomPlan {
  academicAsignatureCourseId: String
  academicAsignatureId: String
  academicGradeId: String
  academicPeriodId: String
  academicStandardsId: [String!]
  campusId: String
  classroomPlanExpectedPerformances: [NewClassroomPlanExpectedPerformance!]
  classroomPlanMethodologicalRoutes: [NewClassroomPlanMethodologicalRoute!]
  classroomPlanPerformanceAppraisalStrategies: [NewClassroomPlanPerformanceAppraisalStrategy!]
  endDate: DateTime
  generalBasicLearningRightsId: [String!]
  learningsId: [String!]
  startDate: DateTime
}

input NewClassroomPlanExpectedPerformance {
  evaluativeComponentId: String
  evidenceLearningsId: [String!]
}

input NewClassroomPlanMethodologicalRoute {
  description: String
  name: String
}

input NewClassroomPlanPerformanceAppraisalStrategy {
  description: String
  evaluativeComponentId: String
}

input NewCourse {
  academicDayId: String
  academicGradeId: String
  campusId: String
  name: String
  order: String
  schoolId: String
  schoolYearId: String
  studentsId: [String!]
  teacherId: String
}

input NewDocumentType {
  code: String
  description: String
  name: String
}

input NewEducationLevel {
  description: String
  name: String
  schoolId: String
  schoolYearId: String
}

input NewEmail {
  dateSend: DateTime
  email: String
  message: String
  title: String
  toId: String
}

input NewEvaluativeComponent {
  academicAreasId: [String!]
  academicAsignaturesId: [String!]
  default: Boolean
  name: String
  schoolId: String
  schoolYearId: String
  type: EvaluativeComponentType
  weight: Float
}

input NewEvidenceLearning {
  learningId: String
  schoolId: String
  statement: String
}

input NewExperienceLearning {
  academicAsignatureCourseId: String
  academicPeriodId: String
  campusId: String
  closeTestDate: DateTime
  criteria: String
  dateDelivery: DateTime
  description: String
  evaluativeComponentsId: [String!]
  evidenceLearningsId: [String!]
  experienceLearningPerformanceLevel: [NewExperienceLearningPerformanceLevel!]
  experienceLearningType: ExperienceLearningType
  experienceType: ExperienceType
  learningsId: [String!]
  navigationMethod: NavigationMethodTestOnline
  onlineDelivery: Boolean
  openTestDate: DateTime
  shuffleQuestions: Boolean
  title: String
}

input NewExperienceLearningAverageValuation {
  academicAsignatureCourseId: String
  academicPeriodId: String
  average: Float
  evaluativeComponentId: String
  experienceLearningType: ExperienceLearningType
  performanceLevelId: String
  studentId: String
}

input NewExperienceLearningCoEvaluation {
  assessment: Float
  campusId: String
  coEvaluatorId: String
  experienceLearningId: String
  observations: String
  performanceLevelId: String
  studentId: String
}

input NewExperienceLearningCoEvaluationValuation {
  assessment: Float
  campusId: String
  experienceLearningId: String
  performanceLevelId: String
  studentId: String
}

input NewExperienceLearningPerformanceLevel {
  criteria: String
  performanceLevelId: String
}

input NewExperienceLearningRubricCriteria {
  criteria: String
  evidenceLearningId: String
  experienceLearningId: String
  experienceLearningRubricCriteriaPerformanceLevel: [NewExperienceLearningRubricCriteriaPerformanceLevel!]
  weight: Float
}

input NewExperienceLearningRubricCriteriaPerformanceLevel {
  criteria: String
  performanceLevelId: String
}

input NewExperienceLearningRubricCriteriaValuation {
  assessment: Float
  experienceLearningRubricCriteriaId: String
  performanceLevelId: String
  studentId: String
}

input NewExperienceLearningRubricValuation {
  assessment: Float
  experienceLearningId: String
  observations: String
  performanceLevelId: String
  studentId: String
}

input NewExperienceLearningSelfAssessmentValuation {
  assessment: Float
  campusId: String
  experienceLearningId: String
  observations: String
  performanceLevelId: String
  studentId: String
}

input NewExperienceLearningTraditionalValuation {
  assessment: Float
  campusId: String
  experienceLearningId: String
  performanceLevelId: String
  studentId: String
}

input NewForum {
  academicAsignatureCourseId: String
  campusId: String
  description: String
  details: String
  name: String
  schoolId: String
  schoolYearId: String
}

input NewForumInteraction {
  campusId: String
  comment: String
  forumQuestionId: String
  schoolId: String
  schoolYearId: String
}

input NewForumQuestion {
  campusId: String
  description: String
  details: String
  forumId: String
  name: String
  schoolId: String
  schoolYearId: String
}

input NewGender {
  code: String
  description: String
  name: String
}

input NewGeneralAcademicArea {
  hasDba: Boolean
  hasStandard: Boolean
  name: String
}

input NewGeneralAcademicAsignature {
  generalAcademicAreaId: String
  hasDba: Boolean
  hasStandard: Boolean
  name: String
}

input NewGeneralAcademicCycle {
  name: String
}

input NewGeneralAcademicGrade {
  generalAcademicCycleId: String
  name: String
}

input NewGeneralAcademicStandard {
  generalAcademicAsignatureId: String
  generalAcademicCycleId: String
  standard: String
  subtype: String
  type: String
}

input NewGeneralBasicLearningRight {
  category: String
  dba: String
  generalAcademicAsignatureId: String
  generalAcademicGradeId: String
}

input NewGeneralPerformanceLevel {
  name: String
}

input NewGradeAssignment {
  academicAsignatureId: String
  academicGradeId: String
  maxHourlyIntensity: Float
  minHourlyIntensity: Float
  schoolId: String
  schoolYearId: String
}

input NewGuardian {
  campusId: [String!]
  newUser: NewUser
  schoolId: [String!]
  studentsId: [String!]
  userId: String
}

input NewInbox {
  dateRead: DateTime
  dateSend: DateTime
  fromId: String
  message: String
  title: String
  userId: String
}

input NewLearning {
  academicAsignatureId: String
  academicGradeId: String
  academicPeriodsId: [String!]
  academicStandardId: String
  generalBasicLearningRightId: String
  schoolId: String
  statement: String
}

input NewMenu {
  activateAction: Boolean
  createAction: Boolean
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  inactiveAction: Boolean
  isHidden: Boolean
  moduleId: String
  name: String
  order: Float
  parentId: String
  readAction: Boolean
  rolesId: [String!]
  updateAction: Boolean
}

input NewMenuItem {
  activateAction: Boolean
  createAction: Boolean
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  inactiveAction: Boolean
  isHidden: Boolean
  menuId: String
  moduleId: String
  name: String
  order: Float
  readAction: Boolean
  rolesId: [String!]
  updateAction: Boolean
}

input NewModality {
  code: String
  name: String
  schoolId: String
  schoolYearId: String
}

input NewModule {
  name: String
  url: String
}

input NewMunicipality {
  name: String
}

input NewNotification {
  dateRead: DateTime
  dateSend: DateTime
  message: String
  title: String
  userId: String
}

input NewObserverAnnotationType {
  code: String
  name: String
  schoolId: String
}

input NewPerformanceLevel {
  abbreviation: String
  academicGradesId: [String!]
  campusId: [String!]
  category: PerformanceLevelCategory
  categoryGrade: PerformanceLevelCategoryGrade
  colorHex: String
  generalPerformanceLevelId: String
  isFinal: Boolean
  isRecovery: Boolean
  minimumScore: Float
  name: String
  order: Float
  schoolId: String
  schoolYearId: String
  topScore: Float
  type: PerformanceLevelType
}

input NewQuestionBankTestOnline {
  academicAsignatureId: String
  academicGradeId: String
  campusId: String
  teacherId: String
}

input NewQuestionCategoryTestOnline {
  campusId: String
  description: String
  name: String
  questionBankTestOnlineId: String
}

input NewQuestionTestOnline {
  campusId: String
  name: String
  questionCategoryTestOnlineId: String
  questionType: QuestionTypeTestOnline
  statement: String
}

input NewRole {
  isCampusAdministrator: Boolean
  isCampusCoordinator: Boolean
  isGuardian: Boolean
  isSchoolAdministrative: Boolean
  isSchoolAdministrator: Boolean
  isStudent: Boolean
  isTeacher: Boolean
  name: String
}

input NewSchool {
  curricularComponent: String
  daneCode: String
  educationalModel: String
  imgPrincipalSignature: String
  imgSecretarySignature: String
  logo: String
  name: String
  pedagogicalModel: String
  textAddress: String
  textDaneNit: String
  textPrincipalSignature: String
  textResolution: String
  textSecretarySignature: String
}

input NewSchoolAdministrative {
  newUser: NewUser
  schoolId: [String!]
  userId: String
}

input NewSchoolAdministrator {
  newUser: NewUser
  schoolId: [String!]
  support: Boolean
  userId: String
}

input NewSchoolConfiguration {
  code: String
  schoolId: String
  schoolYearId: String
  valueNumber: Float
  valueString: String
}

input NewSchoolYear {
  endDate: DateTime
  folioNumber: Float
  schoolId: String
  schoolYear: Float
  schoolYearImportId: String
  schoolYearImportOptions: NewSchoolYearImportOptions
  startDate: DateTime
}

input NewSchoolYearImportOptions {
  academicAsignatureCourse: Boolean
  academicDay: Boolean
  academicHour: Boolean
  academicPeriod: Boolean
  area: Boolean
  asignature: Boolean
  course: Boolean
  educationLevel: Boolean
  evaluativeComponent: Boolean
  grade: Boolean
  gradeAssignment: Boolean
  modality: Boolean
  performanceLevel: Boolean
  speciality: Boolean
  studentNoPromoted: Boolean
  studentPromoted: Boolean
  teacher: Boolean
}

input NewSpecialty {
  code: String
  modalityId: String
  name: String
  schoolId: String
  schoolYearId: String
}

input NewStudent {
  academicGradeId: String
  campusId: [String!]
  code: Float
  courseId: String
  newUser: NewUser
  schoolId: [String!]
  schoolYearId: String
  userId: String
}

input NewStudentAttendance {
  academicAsignatureCourseId: String
  academicPeriodId: String
  day: DateTime
  studentId: String
}

input NewStudentBehaviour {
  academicPeriodId: String
  assessment: Float
  courseId: String
  observation: String
  performanceLevelId: String
  studentId: String
}

input NewStudentObserverAnnotation {
  academicPeriodId: String
  commitment: String
  courseId: String
  observation: String
  observerAnnotationTypeId: String
  studentId: String
}

input NewStudentYearBehaviour {
  assessment: Float
  courseId: String
  observation: String
  performanceLevelId: String
  schoolYearId: String
  studentId: String
}

input NewTeacher {
  academicAsignatureId: [String!]
  attentionSchedule: String
  campusId: [String!]
  newUser: NewUser
  schoolId: [String!]
  schoolYearId: String
  userId: String
}

input NewUser {
  birthdate: DateTime
  documentNumber: String
  documentTypeId: String
  email: String
  genderId: String
  lastName: String
  name: String
  password: String
  phone: String
  profilePhoto: String
  roleId: String
  signaturePhoto: String
  username: String
}

input NewVideoTutorial {
  description: String
  image: String
  maxResolutionFileUrl: String
  mediumResolutionFileUrl: String
  miniumResolutionFileUrl: String
  name: String
  order: Float
  rolesId: [String!]
}

"""The Notification model"""
type Notification implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  dateRead: DateTime
  dateSend: DateTime
  id: ID!
  message: String
  title: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type NotificationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Notification!
}

"""The ObserverAnnotationType model"""
type ObserverAnnotationType implements IModelSchoolData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ObserverAnnotationTypeConnection {
  edges: [ObserverAnnotationTypeEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ObserverAnnotationTypeEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ObserverAnnotationType!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The PerformanceLevel model"""
type PerformanceLevel implements IModelSchoolData {
  abbreviation: String
  academicGrades: [AcademicGrade!]
  academicGradesId: [String!]
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  category: PerformanceLevelCategory
  categoryGrade: PerformanceLevelCategoryGrade
  colorHex: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  generalPerformanceLevel: GeneralPerformanceLevel
  generalPerformanceLevelId: String
  id: ID!
  isFinal: Boolean
  isRecovery: Boolean
  minimumScore: Float
  name: String
  order: Float
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  topScore: Float
  type: PerformanceLevelType
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

"""The PerformanceLevelCategory Register"""
enum PerformanceLevelCategory {
  CAMPUS
  SCHOOL
}

"""The PerformanceLevelCategoryGrade Register"""
enum PerformanceLevelCategoryGrade {
  ALL
  SPECIFIC
}

type PerformanceLevelConnection {
  edges: [PerformanceLevelEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type PerformanceLevelEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: PerformanceLevel!
}

"""The PerformanceLevelType Register"""
enum PerformanceLevelType {
  QUALITATIVE
  QUANTITATIVE
}

type Query {
  getAcademicArea(id: String!): AcademicArea
  getAcademicAreaCoursePeriodValuation(id: String!): AcademicAreaCoursePeriodValuation
  getAcademicAreaCourseYearValuation(id: String!): AcademicAreaCourseYearValuation
  getAcademicAsignature(id: String!): AcademicAsignature
  getAcademicAsignatureCourse(id: String!): AcademicAsignatureCourse
  getAcademicAsignatureCoursePeriodEvidenceLearningValuation(id: String!): AcademicAsignatureCoursePeriodEvidenceLearningValuation
  getAcademicAsignatureCoursePeriodValuation(id: String!): AcademicAsignatureCoursePeriodValuation
  getAcademicAsignatureCourseYearValuation(id: String!): AcademicAsignatureCourseYearValuation
  getAcademicDay(id: String!): AcademicDay
  getAcademicGrade(id: String!): AcademicGrade
  getAcademicHour(id: String!): AcademicHour
  getAcademicPeriod(id: String!): AcademicPeriod
  getAcademicPeriodSchoolYear(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    schoolId: String!
    schoolYearId: String!
  ): AcademicPeriodConnection!
  getAcademicSchedule(id: String!): AcademicSchedule
  getAcademicStandard(id: String!): AcademicStandard
  getAllAcademicArea(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
    schoolYearId: String
  ): AcademicAreaConnection!
  getAllAcademicAreaCoursePeriodValuation(
    academicAreaId: String!
    academicPeriodId: String!

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): AcademicAreaCoursePeriodValuationConnection!
  getAllAcademicAreaCourseYearValuation(
    academicAreaId: String!

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolYearId: String!
    studentId: String
  ): AcademicAreaCourseYearValuationConnection!
  getAllAcademicAsignature(
    academicAreaId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
    schoolYearId: String
  ): AcademicAsignatureConnection!
  getAllAcademicAsignatureCourse(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String
    courseId: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AcademicAsignatureCourseConnection!
  getAllAcademicAsignatureCourseByCourse(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    courseId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AcademicAsignatureCourseConnection!
  getAllAcademicAsignatureCoursePeriodEvidenceLearningValuation(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AcademicAsignatureCoursePeriodEvidenceLearningValuationConnection!
  getAllAcademicAsignatureCoursePeriodValuation(
    academicAsignatureCourseId: String!
    academicPeriodId: String!

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): AcademicAsignatureCoursePeriodValuationConnection!
  getAllAcademicAsignatureCourseTeacher(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    schoolYearId: String
    teacherId: String!
  ): AcademicAsignatureCourseConnection!
  getAllAcademicAsignatureCourseYearValuation(
    academicAsignatureCourseId: String!

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolYearId: String!
    studentId: String
  ): AcademicAsignatureCourseYearValuationConnection!
  getAllAcademicAsignatureNotAssignedInAcademicGrade(
    academicGradeId: String!

    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    schoolId: String!
    schoolYearId: String
  ): AcademicAsignatureConnection!
  getAllAcademicDay(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String
    schoolYearId: String
  ): AcademicDayConnection!
  getAllAcademicDayCampus(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String
    schoolYearId: String
  ): AcademicDayConnection!
  getAllAcademicGrade(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
    schoolYearId: String
  ): AcademicGradeConnection!
  getAllAcademicHour(
    academicDayId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AcademicHourConnection!
  getAllAcademicPeriod(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    orderCustom: Boolean
    schoolId: String!
    schoolYearId: String
  ): AcademicPeriodConnection!
  getAllAcademicSchedule(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AcademicScheduleConnection!
  getAllAcademicStandard(
    academicAsignatureId: String
    academicGradeId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): AcademicStandardConnection!
  getAllAuditLogin(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AuditLoginConnection!
  getAllAverageAcademicPeriodStudent(
    academicPeriodId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    courseId: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AverageAcademicPeriodStudentConnection!
  getAllAverageAcademicYearCourse(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolYearId: String
  ): AverageAcademicYearCourseConnection!
  getAllAverageAcademicYearStudent(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    courseId: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolYearId: String
  ): AverageAcademicYearStudentConnection!
  getAllCampus(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): CampusConnection!
  getAllCampusAdministrator(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): CampusAdministratorConnection!
  getAllCampusCoordinator(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): CampusCoordinatorConnection!
  getAllClassroomPlan(
    academicAsignatureCourseId: String!

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): ClassroomPlanConnection!
  getAllCourse(
    academicGradeId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String
  ): CourseConnection!
  getAllCourseTeacher(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    schoolYearId: String
    teacherId: String!
  ): CourseConnection!
  getAllDocumentType(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): DocumentTypeConnection!
  getAllEducationLevel(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
    schoolYearId: String
  ): EducationLevelConnection!
  getAllEmail(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): EmailConnection!
  getAllEvaluativeComponent(
    academicAsignatureId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
    schoolYearId: String
  ): EvaluativeComponentConnection!
  getAllEvaluativeComponentAcademicAsignatureCourse(
    academicAsignatureCourseId: String!

    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): EvaluativeComponentConnection!
  getAllEvidenceLearning(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    learningId: String
    orderCreated: Boolean!
    schoolId: String!
  ): EvidenceLearningConnection!
  getAllEvidenceLearningLearnigs(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    learningsId: [String!]
  ): EvidenceLearningConnection!
  getAllExperienceLearning(
    academicAsignatureCourseId: String
    academicPeriodId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!
    experienceLearningType: ExperienceLearningType!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): ExperienceLearningConnection!
  getAllExperienceLearningAcademicPeriodEvaluativeComponentAcademicAsignatureCourse(academicPeriodId: String!, evaluativeComponentId: String!, experienceLearningType: ExperienceLearningType!, id: String!): [ExperienceLearning!]
  getAllExperienceLearningAverageValuation(
    academicAsignatureCourseId: String!
    academicPeriodId: String!

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    evaluativeComponentId: String!
    experienceLearningType: ExperienceLearningType!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): ExperienceLearningAverageValuationConnection!
  getAllExperienceLearningCoEvaluation(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    coEvaluatorId: String
    experienceLearningId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): ExperienceLearningCoEvaluationConnection!
  getAllExperienceLearningCoEvaluationValuation(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    experienceLearningId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): ExperienceLearningCoEvaluationValuationConnection!
  getAllExperienceLearningRubricCriteria(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    experienceLearningId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): ExperienceLearningRubricCriteriaConnection!
  getAllExperienceLearningRubricCriteriaValuation(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    experienceLearningRubricCriteriaId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): ExperienceLearningRubricCriteriaValuationConnection!
  getAllExperienceLearningRubricCriteriaValuationStudent(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    experienceLearningId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): ExperienceLearningRubricCriteriaValuationConnection!
  getAllExperienceLearningRubricValuation(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    experienceLearningId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): ExperienceLearningRubricValuationConnection!
  getAllExperienceLearningSelfAssessmentValuation(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    experienceLearningId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): ExperienceLearningSelfAssessmentValuationConnection!
  getAllExperienceLearningTraditionalValuation(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    experienceLearningId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): ExperienceLearningTraditionalValuationConnection!
  getAllExperienceLearningWhitoutCampusId(
    academicAsignatureCourseId: String!
    academicPeriodId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    experienceLearningType: ExperienceLearningType!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): ExperienceLearningConnection!
  getAllForum(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): ForumConnection!
  getAllForumInteraction(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    forumId: String!

    """Paginate last"""
    last: Float
  ): ForumInteractionConnection!
  getAllForumQuestion(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): ForumQuestionConnection!
  getAllGender(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GenderConnection!
  getAllGeneralAcademicArea(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicAreaConnection!
  getAllGeneralAcademicAsignature(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    generalAcademicAreaId: String

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicAsignatureConnection!
  getAllGeneralAcademicCycle(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicCycleConnection!
  getAllGeneralAcademicGrade(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicGradeConnection!
  getAllGeneralAcademicStandard(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    generalAcademicAsignatureId: String
    generalAcademicCycleId: String

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicStandardConnection!
  getAllGeneralBasicLearningRight(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    generalAcademicAsignatureId: String
    generalAcademicGradeId: String

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralBasicLearningRightConnection!
  getAllGeneralPerformanceLevel(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralPerformanceLevelConnection!
  getAllGradeAssignment(
    academicAsignatureId: String
    academicGradeId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): GradeAssignmentConnection!
  getAllGradeAssignmentNotAssignedInCourse(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    courseId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): GradeAssignmentConnection!
  getAllGuardian(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: [String!]

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: [String!]!
  ): GuardianConnection!
  getAllInbox(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    userId: String!
  ): InboxConnection!
  getAllLearning(
    academicAsignatureId: String
    academicGradeId: String
    academicPeriodsId: [String!]

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): LearningConnection!
  getAllMenu(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): MenuConnection!
  getAllMenuItem(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    menuId: String
    orderCreated: Boolean!
  ): MenuItemConnection!
  getAllModality(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
    schoolYearId: String
  ): ModalityConnection!
  getAllModule(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): ModuleConnection!
  getAllMunicipality(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): MunicipalityConnection!
  getAllNotification(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    userId: String!
  ): NotificationConnection!
  getAllObserverAnnotationType(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): ObserverAnnotationTypeConnection!
  getAllPerformanceLevel(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
    schoolYearId: String
  ): PerformanceLevelConnection!
  getAllPerformanceLevelAcademicAsignatureCourse(
    academicAsignatureCourseId: String!

    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): PerformanceLevelConnection!
  getAllPerformanceLevelAcademicAsignatureCourseFinal(
    academicAsignatureCourseId: String!

    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): PerformanceLevelConnection!
  getAllPerformanceLevelAcademicCourse(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    courseId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): PerformanceLevelConnection!
  getAllPerformanceLevelAcademicCourseFinal(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    courseId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): PerformanceLevelConnection!
  getAllQuestionBankTestOnline(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): QuestionBankTestOnlineConnection!
  getAllQuestionCategoryTestOnline(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): QuestionCategoryTestOnlineConnection!
  getAllQuestionTestOnline(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): QuestionTestOnlineConnection!
  getAllRole(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): RoleConnection!
  getAllRoleType(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    type: String!
  ): RoleConnection!
  getAllSchool(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): SchoolConnection!
  getAllSchoolAdministrative(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): SchoolAdministrativeConnection!
  getAllSchoolAdministrator(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): SchoolAdministratorConnection!
  getAllSchoolConfiguration(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): SchoolConfigurationConnection!
  getAllSchoolYear(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): SchoolYearConnection!
  getAllSpecialty(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
    schoolYearId: String
  ): SpecialtyConnection!
  getAllStudent(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String
    schoolYearId: String
  ): StudentConnection!
  getAllStudentAcademicGrade(
    academicGradeId: String!

    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    campusId: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    schoolId: String!
    schoolYearId: String
  ): StudentConnection!
  getAllStudentAcademicGradeIdWithoutCourse(
    academicGradeId: String!

    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    schoolId: String!
  ): StudentConnection!
  getAllStudentAttendance(
    academicAsignatureCourseId: String!
    academicPeriodId: String!

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): StudentAttendanceConnection!
  getAllStudentBehaviour(
    academicPeriodId: String!

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    courseId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String
  ): StudentBehaviourConnection!
  getAllStudentObserverAnnotation(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    courseId: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    studentId: String!
  ): StudentObserverAnnotationConnection!
  getAllStudentYearBehaviour(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    courseId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolYearId: String!
    studentId: String
  ): StudentYearBehaviourConnection!
  getAllTeacher(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: [String!]

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: [String!]!
    schoolYearId: String
  ): TeacherConnection!
  getAllUser(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): UserConnection!
  getAllVideoTutorial(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): VideoTutorialConnection!
  getAllVideoTutorialByRol(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    roleId: String!
  ): VideoTutorialConnection!
  getAuditLogin(id: String!): AuditLogin
  getAverageAcademicPeriodStudent(id: String!): AverageAcademicPeriodStudent
  getAverageAcademicYearCourse(id: String!): AverageAcademicYearCourse
  getAverageAcademicYearStudent(id: String!): AverageAcademicYearStudent
  getCampus(id: String!): Campus
  getCampusAdministrator(id: String!): CampusAdministrator
  getCampusCoordinator(id: String!): CampusCoordinator
  getClassroomPlan(id: String!): ClassroomPlan
  getCourse(id: String!): Course
  getCurrentAcademicPeriod(schoolId: String!): AcademicPeriod
  getDocumentType(id: String!): DocumentType
  getEducationLevel(id: String!): EducationLevel
  getEmail(id: String!): Email
  getEvaluativeComponent(id: String!): EvaluativeComponent
  getEvidenceLearning(id: String!): EvidenceLearning
  getExperienceLearning(id: String!): ExperienceLearning
  getExperienceLearningAverageValuation(id: String!): ExperienceLearningAverageValuation
  getExperienceLearningCoEvaluation(id: String!): ExperienceLearningCoEvaluation
  getExperienceLearningCoEvaluationValuation(id: String!): ExperienceLearningCoEvaluationValuation
  getExperienceLearningRubricCriteria(id: String!): ExperienceLearningRubricCriteria
  getExperienceLearningRubricCriteriaValuation(id: String!): ExperienceLearningRubricCriteriaValuation
  getExperienceLearningRubricValuation(id: String!): ExperienceLearningRubricValuation
  getExperienceLearningSelfAssessmentValuation(id: String!): ExperienceLearningSelfAssessmentValuation
  getExperienceLearningTraditionalValuation(id: String!): ExperienceLearningTraditionalValuation
  getForum(id: String!): Forum
  getForumInteraction(id: String!): ForumInteraction
  getForumQuestion(id: String!): ForumQuestion
  getGender(id: String!): Gender
  getGeneralAcademicArea(id: String!): GeneralAcademicArea
  getGeneralAcademicAsignature(id: String!): GeneralAcademicAsignature
  getGeneralAcademicCycle(id: String!): GeneralAcademicCycle
  getGeneralAcademicGrade(id: String!): GeneralAcademicGrade
  getGeneralAcademicStandard(id: String!): GeneralAcademicStandard
  getGeneralBasicLearningRight(id: String!): GeneralBasicLearningRight
  getGeneralPerformanceLevel(id: String!): GeneralPerformanceLevel
  getGradeAssignment(id: String!): GradeAssignment
  getGuardian(id: String!): Guardian
  getInbox(id: String!): Inbox
  getLearning(id: String!): Learning
  getMenu(id: String!): Menu
  getMenuItem(id: String!): MenuItem
  getModality(id: String!): Modality
  getModule(id: String!): Module
  getMunicipality(id: String!): Municipality
  getNotification(id: String!): Notification
  getObserverAnnotationType(id: String!): ObserverAnnotationType
  getPerformanceLevel(id: String!): PerformanceLevel
  getQuestionBankTestOnline(id: String!): QuestionBankTestOnline
  getQuestionCategoryTestOnline(id: String!): QuestionCategoryTestOnline
  getQuestionTestOnline(id: String!): QuestionTestOnline
  getRole(id: String!): Role
  getSchool(id: String!): School
  getSchoolAdministrative(id: String!): SchoolAdministrative
  getSchoolAdministrator(id: String!): SchoolAdministrator
  getSchoolConfiguration(id: String!): SchoolConfiguration
  getSchoolYear(id: String!): SchoolYear
  getSpecialty(id: String!): Specialty
  getStudent(id: String!): Student
  getStudentAttendance(id: String!): StudentAttendance
  getStudentBehaviour(id: String!): StudentBehaviour
  getStudentObserverAnnotation(id: String!): StudentObserverAnnotation
  getStudentYearBehaviour(id: String!): StudentYearBehaviour
  getTeacher(id: String!): Teacher
  getUser(id: String!): User
  getUserByDocumentNumber(documentNumber: String!): User
  getValuationStudents(id: String!): [ExperienceLearningValuation!]
  getVideoTutorial(id: String!): VideoTutorial
  me(schoolYearId: String!): Jwt!
}

"""The QuestionBankTestOnline model"""
type QuestionBankTestOnline implements IModelCampusData {
  academicAsignature: AcademicAsignature
  academicAsignatureId: String
  academicGrade: AcademicGrade
  academicGradeId: String
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: School
  schoolId: String
  teacher: Teacher
  teacherId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type QuestionBankTestOnlineConnection {
  edges: [QuestionBankTestOnlineEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type QuestionBankTestOnlineEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: QuestionBankTestOnline!
}

"""The QuestionCategoryTestOnline model"""
type QuestionCategoryTestOnline implements IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  id: ID!
  name: String
  questionBankTestOnline: QuestionBankTestOnline
  questionBankTestOnlineId: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type QuestionCategoryTestOnlineConnection {
  edges: [QuestionCategoryTestOnlineEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type QuestionCategoryTestOnlineEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: QuestionCategoryTestOnline!
}

"""The QuestionTestOnline model"""
type QuestionTestOnline implements IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  questionCategoryTestOnline: QuestionCategoryTestOnline
  questionCategoryTestOnlineId: String
  questionType: QuestionTypeTestOnline
  school: School
  schoolId: String
  statement: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type QuestionTestOnlineConnection {
  edges: [QuestionTestOnlineEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type QuestionTestOnlineEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: QuestionTestOnline!
}

"""The QuestionTypeTestOnline Register"""
enum QuestionTypeTestOnline {
  ESSAY
  MULTIPLECHOICE
  NUMERICAL
  SHORTANSWER
  TRUEFALSE
}

"""The Role model"""
type Role implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  isCampusAdministrator: Boolean
  isCampusCoordinator: Boolean
  isGuardian: Boolean
  isSchoolAdministrative: Boolean
  isSchoolAdministrator: Boolean
  isStudent: Boolean
  isTeacher: Boolean
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type RoleConnection {
  edges: [RoleEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type RoleEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Role!
}

"""The School model"""
type School implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  curricularComponent: String
  daneCode: String
  educationalModel: String
  id: ID!
  imgPrincipalSignature: String
  imgSecretarySignature: String
  logo: String
  name: String
  pedagogicalModel: String
  schoolYear: [SchoolYear!]
  textAddress: String
  textDaneNit: String
  textPrincipalSignature: String
  textResolution: String
  textSecretarySignature: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

"""The SchoolAdministrative model"""
type SchoolAdministrative implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type SchoolAdministrativeConnection {
  edges: [SchoolAdministrativeEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SchoolAdministrativeEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: SchoolAdministrative!
}

"""The SchoolAdministrator model"""
type SchoolAdministrator implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  support: Boolean
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type SchoolAdministratorConnection {
  edges: [SchoolAdministratorEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SchoolAdministratorEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: SchoolAdministrator!
}

"""The SchoolConfiguration model"""
type SchoolConfiguration implements IModelSchoolData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  id: ID!
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  valueNumber: Float
  valueString: String
  version: Float
}

type SchoolConfigurationConnection {
  edges: [SchoolConfigurationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SchoolConfigurationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: SchoolConfiguration!
}

type SchoolConnection {
  edges: [SchoolEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SchoolEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: School!
}

"""The SchoolYear model"""
type SchoolYear implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  endDate: DateTime
  folioNumber: Float
  id: ID!
  school: School
  schoolId: String
  schoolYear: Float
  schoolYearImport: SchoolYear
  schoolYearImportId: String
  schoolYearImportOptions: SchoolYearImportOptions
  startDate: DateTime
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type SchoolYearConnection {
  edges: [SchoolYearEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SchoolYearEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: SchoolYear!
}

"""The SchoolYearImportOptions model"""
type SchoolYearImportOptions {
  academicAsignatureCourse: Boolean
  academicDay: Boolean
  academicHour: Boolean
  academicPeriod: Boolean
  area: Boolean
  asignature: Boolean
  course: Boolean
  educationLevel: Boolean
  evaluativeComponent: Boolean
  grade: Boolean
  gradeAssignment: Boolean
  modality: Boolean
  performanceLevel: Boolean
  speciality: Boolean
  studentNoPromoted: Boolean
  studentPromoted: Boolean
  teacher: Boolean
}

"""The Specialty model"""
type Specialty implements IModelSchoolData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  id: ID!
  modality: Modality
  modalityId: String
  name: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type SpecialtyConnection {
  edges: [SpecialtyEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SpecialtyEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Specialty!
}

"""The Student model"""
type Student implements IModelData {
  academicGrade: AcademicGrade
  academicGradeId: String
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  code: Float
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

"""The StudentAttendance model"""
type StudentAttendance implements IModelCampusData {
  academicAsignatureCourse: AcademicAsignatureCourse
  academicAsignatureCourseId: String
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  day: DateTime
  id: ID!
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type StudentAttendanceConnection {
  edges: [StudentAttendanceEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type StudentAttendanceEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: StudentAttendance!
}

"""The StudentBehaviour model"""
type StudentBehaviour implements IModelCampusData {
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  observation: String
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type StudentBehaviourConnection {
  edges: [StudentBehaviourEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type StudentBehaviourEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: StudentBehaviour!
}

type StudentConnection {
  edges: [StudentEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type StudentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Student!
}

"""The StudentObserverAnnotation model"""
type StudentObserverAnnotation implements IModelCampusData {
  academicPeriod: AcademicPeriod
  academicPeriodId: String
  active: Boolean
  campus: Campus
  campusId: String
  commitment: String
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  observation: String
  observerAnnotationType: ObserverAnnotationType
  observerAnnotationTypeId: String
  school: School
  schoolId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type StudentObserverAnnotationConnection {
  edges: [StudentObserverAnnotationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type StudentObserverAnnotationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: StudentObserverAnnotation!
}

"""The StudentYearBehaviour model"""
type StudentYearBehaviour implements IModelCampusData {
  active: Boolean
  assessment: Float
  campus: Campus
  campusId: String
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  observation: String
  performanceLevel: PerformanceLevel
  performanceLevelId: String
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  student: Student
  studentId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type StudentYearBehaviourConnection {
  edges: [StudentYearBehaviourEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type StudentYearBehaviourEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: StudentYearBehaviour!
}

"""The Teacher model"""
type Teacher implements IModelData {
  academicAsignature: [AcademicAsignature!]
  academicAsignatureId: [String!]
  active: Boolean
  attentionSchedule: String
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  entityBaseId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  schoolYear: SchoolYear
  schoolYearId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type TeacherConnection {
  edges: [TeacherEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type TeacherEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Teacher!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""The User model"""
type User {
  active: Boolean
  birthdate: DateTime
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  documentNumber: String
  documentType: DocumentType
  documentTypeId: String
  email: String
  gender: Gender
  genderId: String
  id: ID!
  lastName: String
  name: String
  password: String
  phone: String
  profilePhoto: String
  role: Role
  roleId: String
  school: School
  schoolId: String
  signaturePhoto: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  username: String
  version: Float
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type UserEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: User!
}

"""The ValuationType Register"""
enum ValuationType {
  CALCULATE
  DEFINITIVE
  RECOVERY
}

"""The VideoTutorial model"""
type VideoTutorial implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  id: ID!
  image: String
  maxResolutionFileUrl: String
  mediumResolutionFileUrl: String
  miniumResolutionFileUrl: String
  name: String
  order: Float
  roles: [Role!]
  rolesId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type VideoTutorialConnection {
  edges: [VideoTutorialEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type VideoTutorialEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: VideoTutorial!
}
