# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The AcademicArea model"""
type AcademicArea implements IModelSchoolData {
  abbreviation: String
  academicGrade: [AcademicGrade!]
  academicGradeId: [String!]
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicArea: GeneralAcademicArea
  generalAcademicAreaId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicAreaConnection {
  edges: [AcademicAreaEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicAreaEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicArea!
}

"""The AcademicAsignature model"""
type AcademicAsignature implements IModelSchoolData {
  abbreviation: String
  academicArea: AcademicArea
  academicAreaId: String
  academicGrade: [AcademicGrade!]
  academicGradeId: [String!]
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  maxWeight: Float
  minWeight: Float
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicAsignatureConnection {
  edges: [AcademicAsignatureEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicAsignatureEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicAsignature!
}

"""The AcademicDay model"""
type AcademicDay implements IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  day: [Day!]
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicDayConnection {
  edges: [AcademicDayEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicDayEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicDay!
}

"""The AcademicGrade model"""
type AcademicGrade implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  educationLevel: EducationLevel
  educationLevelId: String
  generalAcademicCycle: GeneralAcademicCycle
  generalAcademicCycleId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  specialty: Specialty
  specialtyId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicGradeConnection {
  edges: [AcademicGradeEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicGradeEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicGrade!
}

"""The AcademicHour model"""
type AcademicHour implements IModelCampusData {
  academicDay: AcademicDay
  academicDayId: String
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  endTime: String
  id: ID!
  order: Float
  startTime: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicHourConnection {
  edges: [AcademicHourEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicHourEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicHour!
}

"""The AcademicIndicator model"""
type AcademicIndicator implements IModelSchoolData {
  academicAsignature: AcademicAsignature
  academicAsignatureId: String
  academicGrade: AcademicGrade
  academicGradeId: String
  academicStandard: AcademicStandard
  academicStandardId: String
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  indicator: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicIndicatorConnection {
  edges: [AcademicIndicatorEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicIndicatorEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicIndicator!
}

"""The AcademicPeriod model"""
type AcademicPeriod implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  endDate: DateTime
  id: ID!
  school: School
  schoolId: String
  schoolYear: SchoolYear
  schoolYearId: String
  startDate: DateTime
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
  weight: Float
}

type AcademicPeriodConnection {
  edges: [AcademicPeriodEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicPeriodEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicPeriod!
}

"""The AcademicStandard model"""
type AcademicStandard implements IModelSchoolData {
  academicAsignature: AcademicAsignature
  academicAsignatureId: String
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicCycle: GeneralAcademicCycle
  generalAcademicCycleId: String
  generalAcademicStandard: GeneralAcademicStandard
  generalAcademicStandardId: String
  id: ID!
  school: School
  schoolId: String
  standard: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type AcademicStandardConnection {
  edges: [AcademicStandardEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AcademicStandardEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AcademicStandard!
}

"""The AuditLogin model"""
type AuditLogin implements IModelData {
  active: Boolean
  auth: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userAgent: String
  userId: String
  userIp: String
  userPort: String
  username: String
  version: Float
}

type AuditLoginConnection {
  edges: [AuditLoginEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type AuditLoginEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AuditLogin!
}

"""The Campus model"""
type Campus implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

"""The CampusAdministrator model"""
type CampusAdministrator implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type CampusAdministratorConnection {
  edges: [CampusAdministratorEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type CampusAdministratorEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: CampusAdministrator!
}

type CampusConnection {
  edges: [CampusEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

"""The CampusCoordinator model"""
type CampusCoordinator implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type CampusCoordinatorConnection {
  edges: [CampusCoordinatorEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type CampusCoordinatorEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: CampusCoordinator!
}

type CampusEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Campus!
}

"""The Course model"""
type Course implements IModelCampusData {
  academicGrade: AcademicGrade
  academicGradeId: String
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  order: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type CourseConnection {
  edges: [CourseEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type CourseEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Course!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""The Day Register"""
enum Day {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

"""The Document Type model"""
type DocumentType implements IModelData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type DocumentTypeConnection {
  edges: [DocumentTypeEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type DocumentTypeEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: DocumentType!
}

"""The EducationLevel model"""
type EducationLevel implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  id: ID!
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type EducationLevelConnection {
  edges: [EducationLevelEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type EducationLevelEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: EducationLevel!
}

"""The Email model"""
type Email implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  dateSend: DateTime
  email: String
  id: ID!
  message: String
  title: String
  to: User
  toId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type EmailConnection {
  edges: [EmailEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type EmailEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Email!
}

"""The EvaluativeComponent model"""
type EvaluativeComponent implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
  weight: Float
}

type EvaluativeComponentConnection {
  edges: [EvaluativeComponentEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type EvaluativeComponentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: EvaluativeComponent!
}

"""The Forum model"""
type Forum implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  details: String
  id: ID!
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ForumConnection {
  edges: [ForumEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ForumEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Forum!
}

"""The ForumInteraction model"""
type ForumInteraction implements IModelSchoolData {
  active: Boolean
  comment: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  forum: Forum
  forumId: String
  id: ID!
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ForumInteractionConnection {
  edges: [ForumInteractionEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ForumInteractionEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: ForumInteraction!
}

"""The Gender model"""
type Gender implements IModelData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  description: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GenderConnection {
  edges: [GenderEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GenderEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Gender!
}

"""The GeneralAcademicArea model"""
type GeneralAcademicArea implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicAreaConnection {
  edges: [GeneralAcademicAreaEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicAreaEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicArea!
}

"""The GeneralAcademicAsignature model"""
type GeneralAcademicAsignature implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicArea: GeneralAcademicArea
  generalAcademicAreaId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicAsignatureConnection {
  edges: [GeneralAcademicAsignatureEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicAsignatureEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicAsignature!
}

"""The GeneralAcademicCycle model"""
type GeneralAcademicCycle implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicCycleConnection {
  edges: [GeneralAcademicCycleEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicCycleEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicCycle!
}

"""The GeneralAcademicGrade model"""
type GeneralAcademicGrade implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicCycle: GeneralAcademicCycle
  generalAcademicCycleId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicGradeConnection {
  edges: [GeneralAcademicGradeEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicGradeEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicGrade!
}

"""The GeneralAcademicStandard model"""
type GeneralAcademicStandard implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalAcademicAsignature: GeneralAcademicAsignature
  generalAcademicAsignatureId: String
  generalAcademicCycle: GeneralAcademicCycle
  generalAcademicCycleId: String
  id: ID!
  standard: String
  subtype: String
  type: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralAcademicStandardConnection {
  edges: [GeneralAcademicStandardEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralAcademicStandardEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralAcademicStandard!
}

"""The GeneralPerformanceLevel model"""
type GeneralPerformanceLevel implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GeneralPerformanceLevelConnection {
  edges: [GeneralPerformanceLevelEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GeneralPerformanceLevelEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GeneralPerformanceLevel!
}

"""The GradeAssignment model"""
type GradeAssignment implements IModelSchoolData {
  academicAsignature: AcademicAsignature
  academicAsignatureId: String
  academicGrade: AcademicGrade
  academicGradeId: String
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  hourlyintensity: Float
  id: ID!
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type GradeAssignmentConnection {
  edges: [GradeAssignmentEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GradeAssignmentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: GradeAssignment!
}

"""The Guardian model"""
type Guardian implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  students: [Student!]
  studentsId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type GuardianConnection {
  edges: [GuardianEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type GuardianEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Guardian!
}

interface IModelCampusData {
  active: Boolean
  campus: Campus
  campusId: String
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

interface IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

interface IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

"""The Inbox model"""
type Inbox implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  dateRead: DateTime
  dateSend: DateTime
  from: User
  fromId: String
  id: ID!
  message: String
  title: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type InboxConnection {
  edges: [InboxEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type InboxEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Inbox!
}

"""The User model"""
type Jwt {
  campus: [Campus!]
  jwt: String
  name: String
  role: Role
  roleMenus: [Menu!]
  schools: [School!]
  userId: String
}

"""The Menu model"""
type Menu implements IModelData {
  activateAction: Boolean
  active: Boolean
  createAction: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  id: ID!
  inactiveAction: Boolean
  menuItems: [MenuItem!]
  menuItemsLogin: [MenuItem!]
  module: Module
  moduleId: String
  name: String
  order: Float
  readAction: Boolean
  roles: [Role!]
  rolesId: [String!]
  updateAction: Boolean
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type MenuConnection {
  edges: [MenuEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type MenuEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Menu!
}

"""The MenuItem model"""
type MenuItem implements IModelData {
  activateAction: Boolean
  active: Boolean
  createAction: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  id: ID!
  inactiveAction: Boolean
  menu: Menu
  menuId: String
  module: Module
  moduleId: String
  name: String
  order: Float
  readAction: Boolean
  roles: [Role!]
  rolesId: [String!]
  updateAction: Boolean
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type MenuItemConnection {
  edges: [MenuItemEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type MenuItemEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: MenuItem!
}

"""The Modality model"""
type Modality implements IModelSchoolData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type ModalityConnection {
  edges: [ModalityEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ModalityEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Modality!
}

"""The Module model"""
type Module implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  url: String
  version: Float
}

type ModuleConnection {
  edges: [ModuleEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type ModuleEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Module!
}

"""The Municipality model"""
type Municipality implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type MunicipalityConnection {
  edges: [MunicipalityEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type MunicipalityEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Municipality!
}

type Mutation {
  changeActiveAcademicArea(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicAsignature(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicDay(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicGrade(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicHour(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicIndicator(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicPeriod(active: Boolean!, id: String!): Boolean!
  changeActiveAcademicStandard(active: Boolean!, id: String!): Boolean!
  changeActiveAuditLogin(active: Boolean!, id: String!): Boolean!
  changeActiveCampus(active: Boolean!, id: String!): Boolean!
  changeActiveCampusAdministrator(active: Boolean!, id: String!): Boolean!
  changeActiveCampusCoordinator(active: Boolean!, id: String!): Boolean!
  changeActiveCourse(active: Boolean!, id: String!): Boolean!
  changeActiveDocumentType(active: Boolean!, id: String!): Boolean!
  changeActiveEducationLevel(active: Boolean!, id: String!): Boolean!
  changeActiveEmail(active: Boolean!, id: String!): Boolean!
  changeActiveEvaluativeComponent(active: Boolean!, id: String!): Boolean!
  changeActiveForum(active: Boolean!, id: String!): Boolean!
  changeActiveForumInteraction(active: Boolean!, id: String!): Boolean!
  changeActiveGender(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicArea(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicAsignature(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicCycle(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicGrade(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralAcademicStandard(active: Boolean!, id: String!): Boolean!
  changeActiveGeneralPerformanceLevel(active: Boolean!, id: String!): Boolean!
  changeActiveGradeAssignment(active: Boolean!, id: String!): Boolean!
  changeActiveGuardian(active: Boolean!, id: String!): Boolean!
  changeActiveInbox(active: Boolean!, id: String!): Boolean!
  changeActiveMenu(active: Boolean!, id: String!): Boolean!
  changeActiveMenuItem(active: Boolean!, id: String!): Boolean!
  changeActiveModality(active: Boolean!, id: String!): Boolean!
  changeActiveModule(active: Boolean!, id: String!): Boolean!
  changeActiveMunicipality(active: Boolean!, id: String!): Boolean!
  changeActiveNotification(active: Boolean!, id: String!): Boolean!
  changeActivePerformanceLevel(active: Boolean!, id: String!): Boolean!
  changeActiveRole(active: Boolean!, id: String!): Boolean!
  changeActiveSchool(active: Boolean!, id: String!): Boolean!
  changeActiveSchoolAdministrator(active: Boolean!, id: String!): Boolean!
  changeActiveSchoolYear(active: Boolean!, id: String!): Boolean!
  changeActiveSpecialty(active: Boolean!, id: String!): Boolean!
  changeActiveStudent(active: Boolean!, id: String!): Boolean!
  changeActiveTeacher(active: Boolean!, id: String!): Boolean!
  changeActiveUser(active: Boolean!, id: String!): Boolean!
  createAcademicArea(data: NewAcademicArea!): AcademicArea!
  createAcademicAsignature(data: NewAcademicAsignature!): AcademicAsignature!
  createAcademicDay(data: NewAcademicDay!): AcademicDay!
  createAcademicGrade(data: NewAcademicGrade!): AcademicGrade!
  createAcademicHour(data: NewAcademicHour!): AcademicHour!
  createAcademicIndicator(data: NewAcademicIndicator!): AcademicIndicator!
  createAcademicPeriod(data: NewAcademicPeriod!): AcademicPeriod!
  createAcademicStandard(data: NewAcademicStandard!): AcademicStandard!
  createAuditLogin(data: NewAuditLogin!): AuditLogin!
  createCampus(data: NewCampus!): Campus!
  createCampusAdministrator(data: NewCampusAdministrator!): CampusAdministrator!
  createCampusCoordinator(data: NewCampusCoordinator!): CampusCoordinator!
  createCourse(data: NewCourse!): Course!
  createDocumentType(data: NewDocumentType!): DocumentType!
  createEducationLevel(data: NewEducationLevel!): EducationLevel!
  createEmail(data: NewEmail!): Email!
  createEvaluativeComponent(data: NewEvaluativeComponent!): EvaluativeComponent!
  createForum(data: NewForum!): Forum!
  createForumInteraction(data: NewForumInteraction!): ForumInteraction!
  createGender(data: NewGender!): Gender!
  createGeneralAcademicArea(data: NewGeneralAcademicArea!): GeneralAcademicArea!
  createGeneralAcademicAsignature(data: NewGeneralAcademicAsignature!): GeneralAcademicAsignature!
  createGeneralAcademicCycle(data: NewGeneralAcademicCycle!): GeneralAcademicCycle!
  createGeneralAcademicGrade(data: NewGeneralAcademicGrade!): GeneralAcademicGrade!
  createGeneralAcademicStandard(data: NewGeneralAcademicStandard!): GeneralAcademicStandard!
  createGeneralPerformanceLevel(data: NewGeneralPerformanceLevel!): GeneralPerformanceLevel!
  createGradeAssignment(data: NewGradeAssignment!): GradeAssignment!
  createGuardian(data: NewGuardian!): Guardian!
  createInbox(data: NewInbox!): Inbox!
  createMenu(data: NewMenu!): Menu!
  createMenuItem(data: NewMenuItem!): MenuItem!
  createModality(data: NewModality!): Modality!
  createModule(data: NewModule!): Module!
  createMunicipality(data: NewMunicipality!): Municipality!
  createNotification(data: NewNotification!): Notification!
  createPerformanceLevel(data: NewPerformanceLevel!): PerformanceLevel!
  createRole(data: NewRole!): Role!
  createSchool(data: NewSchool!): School!
  createSchoolAdministrator(data: NewSchoolAdministrator!): SchoolAdministrator!
  createSchoolYear(data: NewSchoolYear!): SchoolYear!
  createSpecialty(data: NewSpecialty!): Specialty!
  createStudent(data: NewStudent!): Student!
  createTeacher(data: NewTeacher!): Teacher!
  createUser(data: NewUser!): User!
  deleteAcademicArea(id: String!): Boolean!
  deleteAcademicAsignature(id: String!): Boolean!
  deleteAcademicDay(id: String!): Boolean!
  deleteAcademicGrade(id: String!): Boolean!
  deleteAcademicHour(id: String!): Boolean!
  deleteAcademicIndicator(id: String!): Boolean!
  deleteAcademicPeriod(id: String!): Boolean!
  deleteAcademicStandard(id: String!): Boolean!
  deleteCampus(id: String!): Boolean!
  deleteCampusAdministrator(id: String!): Boolean!
  deleteCampusCoordinator(id: String!): Boolean!
  deleteCourse(id: String!): Boolean!
  deleteDocumentType(id: String!): Boolean!
  deleteEducationLevel(id: String!): Boolean!
  deleteEmail(id: String!): Boolean!
  deleteEvaluativeComponent(id: String!): Boolean!
  deleteForum(id: String!): Boolean!
  deleteForumInteraction(id: String!): Boolean!
  deleteGender(id: String!): Boolean!
  deleteGeneralAcademicArea(id: String!): Boolean!
  deleteGeneralAcademicAsignature(id: String!): Boolean!
  deleteGeneralAcademicCycle(id: String!): Boolean!
  deleteGeneralAcademicGrade(id: String!): Boolean!
  deleteGeneralAcademicStandard(id: String!): Boolean!
  deleteGeneralPerformanceLevel(id: String!): Boolean!
  deleteGradeAssignment(id: String!): Boolean!
  deleteGuardian(id: String!): Boolean!
  deleteInbox(id: String!): Boolean!
  deleteMenu(id: String!): Boolean!
  deleteMenuItem(id: String!): Boolean!
  deleteModality(id: String!): Boolean!
  deleteModule(id: String!): Boolean!
  deleteMunicipality(id: String!): Boolean!
  deleteNotification(id: String!): Boolean!
  deletePerformanceLevel(id: String!): Boolean!
  deleteRole(id: String!): Boolean!
  deleteSchool(id: String!): Boolean!
  deleteSchoolAdministrator(id: String!): Boolean!
  deleteSchoolYear(id: String!): Boolean!
  deleteSpecialty(id: String!): Boolean!
  deleteStudent(id: String!): Boolean!
  deleteTeacher(id: String!): Boolean!
  deleteUser(id: String!): Boolean!
  login(password: String!, username: String!): Jwt!
  singleUpload(file: Upload, id: String!): Boolean!
  updateAcademicArea(data: NewAcademicArea!, id: String!): AcademicArea!
  updateAcademicAsignature(data: NewAcademicAsignature!, id: String!): AcademicAsignature!
  updateAcademicDay(data: NewAcademicDay!, id: String!): AcademicDay!
  updateAcademicGrade(data: NewAcademicGrade!, id: String!): AcademicGrade!
  updateAcademicHour(data: NewAcademicHour!, id: String!): AcademicHour!
  updateAcademicIndicator(data: NewAcademicIndicator!, id: String!): AcademicIndicator!
  updateAcademicPeriod(data: NewAcademicPeriod!, id: String!): AcademicPeriod!
  updateAcademicStandard(data: NewAcademicStandard!, id: String!): AcademicStandard!
  updateAuditLogin(data: NewAuditLogin!, id: String!): AuditLogin!
  updateCampus(data: NewCampus!, id: String!): Campus!
  updateCampusAdministrator(data: NewCampusAdministrator!, id: String!): CampusAdministrator!
  updateCampusCoordinator(data: NewCampusCoordinator!, id: String!): CampusCoordinator!
  updateCourse(data: NewCourse!, id: String!): Course!
  updateDocumentType(data: NewDocumentType!, id: String!): DocumentType!
  updateEducationLevel(data: NewEducationLevel!, id: String!): EducationLevel!
  updateEmail(data: NewEmail!, id: String!): Email!
  updateEvaluativeComponent(data: NewEvaluativeComponent!, id: String!): EvaluativeComponent!
  updateForum(data: NewForum!, id: String!): Forum!
  updateForumInteraction(data: NewForumInteraction!, id: String!): ForumInteraction!
  updateGender(data: NewGender!, id: String!): Gender!
  updateGeneralAcademicArea(data: NewGeneralAcademicArea!, id: String!): GeneralAcademicArea!
  updateGeneralAcademicAsignature(data: NewGeneralAcademicAsignature!, id: String!): GeneralAcademicAsignature!
  updateGeneralAcademicCycle(data: NewGeneralAcademicCycle!, id: String!): GeneralAcademicCycle!
  updateGeneralAcademicGrade(data: NewGeneralAcademicGrade!, id: String!): GeneralAcademicGrade!
  updateGeneralAcademicStandard(data: NewGeneralAcademicStandard!, id: String!): GeneralAcademicStandard!
  updateGeneralPerformanceLevel(data: NewGeneralPerformanceLevel!, id: String!): GeneralPerformanceLevel!
  updateGradeAssignment(data: NewGradeAssignment!, id: String!): GradeAssignment!
  updateGuardian(data: NewGuardian!, id: String!): Guardian!
  updateInbox(data: NewInbox!, id: String!): Inbox!
  updateMenu(data: NewMenu!, id: String!): Menu!
  updateMenuItem(data: NewMenuItem!, id: String!): MenuItem!
  updateModality(data: NewModality!, id: String!): Modality!
  updateModule(data: NewModule!, id: String!): Module!
  updateMunicipality(data: NewMunicipality!, id: String!): Municipality!
  updateNotification(data: NewNotification!, id: String!): Notification!
  updatePerformanceLevel(data: NewPerformanceLevel!, id: String!): PerformanceLevel!
  updateRole(data: NewRole!, id: String!): Role!
  updateSchool(data: NewSchool!, id: String!): School!
  updateSchoolAdministrator(data: NewSchoolAdministrator!, id: String!): SchoolAdministrator!
  updateSchoolYear(data: NewSchoolYear!, id: String!): SchoolYear!
  updateSpecialty(data: NewSpecialty!, id: String!): Specialty!
  updateStudent(data: NewStudent!, id: String!): Student!
  updateTeacher(data: NewTeacher!, id: String!): Teacher!
  updateUser(data: NewUser!, id: String!): User!
}

input NewAcademicArea {
  abbreviation: String
  academicGradeId: [String!]
  generalAcademicAreaId: String
  name: String
  schoolId: String
}

input NewAcademicAsignature {
  abbreviation: String
  academicAreaId: String
  academicGradeId: [String!]
  code: String
  maxWeight: Float
  minWeight: Float
  name: String
  schoolId: String
}

input NewAcademicDay {
  campusId: String
  day: [Day!]
  name: String
}

input NewAcademicGrade {
  educationLevelId: String
  generalAcademicCycleId: String
  name: String
  schoolId: String
  specialtyId: String
}

input NewAcademicHour {
  academicDayId: String
  campusId: String
  endTime: String
  order: Float
  startTime: String
}

input NewAcademicIndicator {
  academicAsignatureId: String
  academicGradeId: String
  academicStandardId: String
  indicator: String
  schoolId: String
}

input NewAcademicPeriod {
  endDate: DateTime
  schoolId: String
  schoolYearId: String
  startDate: DateTime
  weight: Float
}

input NewAcademicStandard {
  academicAsignatureId: String
  generalAcademicCycleId: String
  generalAcademicStandardId: String
  schoolId: String
  standard: String
}

input NewAuditLogin {
  auth: Boolean
  userAgent: String
  userId: String
  userIp: String
  userPort: String
  username: String
}

input NewCampus {
  name: String
  schoolId: String
}

input NewCampusAdministrator {
  campusId: [String!]
  newUser: NewUser
  schoolId: [String!]
  userId: String
}

input NewCampusCoordinator {
  campusId: [String!]
  newUser: NewUser
  schoolId: [String!]
  userId: String
}

input NewCourse {
  academicGradeId: String
  campusId: String
  name: String
  order: String
}

input NewDocumentType {
  code: String
  description: String
  name: String
}

input NewEducationLevel {
  description: String
  name: String
  schoolId: String
}

input NewEmail {
  dateSend: DateTime
  email: String
  message: String
  title: String
  toId: String
}

input NewEvaluativeComponent {
  name: String
  schoolId: String
  weight: Float
}

input NewForum {
  description: String
  details: String
  name: String
  schoolId: String
}

input NewForumInteraction {
  comment: String
  forumId: String
}

input NewGender {
  code: String
  description: String
  name: String
}

input NewGeneralAcademicArea {
  name: String
}

input NewGeneralAcademicAsignature {
  generalAcademicAreaId: String
  name: String
}

input NewGeneralAcademicCycle {
  name: String
}

input NewGeneralAcademicGrade {
  generalAcademicCycleId: String
  name: String
}

input NewGeneralAcademicStandard {
  generalAcademicAsignatureId: String
  generalAcademicCycleId: String
  standard: String
  subtype: String
  type: String
}

input NewGeneralPerformanceLevel {
  name: String
}

input NewGradeAssignment {
  academicAsignatureId: String
  academicGradeId: String
  hourlyintensity: Float
  schoolId: String
}

input NewGuardian {
  campusId: [String!]
  newUser: NewUser
  schoolId: [String!]
  studentsId: [String!]
  userId: String
}

input NewInbox {
  dateRead: DateTime
  dateSend: DateTime
  fromId: String
  message: String
  title: String
  userId: String
}

input NewMenu {
  activateAction: Boolean
  createAction: Boolean
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  inactiveAction: Boolean
  moduleId: String
  name: String
  order: Float
  parentId: String
  readAction: Boolean
  rolesId: [String!]
  updateAction: Boolean
}

input NewMenuItem {
  activateAction: Boolean
  createAction: Boolean
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  inactiveAction: Boolean
  menuId: String
  moduleId: String
  name: String
  order: Float
  readAction: Boolean
  rolesId: [String!]
  updateAction: Boolean
}

input NewModality {
  code: String
  name: String
  schoolId: String
}

input NewModule {
  name: String
  url: String
}

input NewMunicipality {
  name: String
}

input NewNotification {
  dateRead: DateTime
  dateSend: DateTime
  message: String
  title: String
  userId: String
}

input NewPerformanceLevel {
  generalPerformanceLevelId: String
  minimumScore: Float
  name: String
  schoolId: String
  topScore: Float
}

input NewRole {
  isCampusAdministrator: Boolean
  isCampusCoordinator: Boolean
  isGuardian: Boolean
  isSchoolAdministrator: Boolean
  isStudent: Boolean
  isTeacher: Boolean
  name: String
}

input NewSchool {
  daneCode: String
  name: String
}

input NewSchoolAdministrator {
  newUser: NewUser
  schoolId: [String!]
  userId: String
}

input NewSchoolYear {
  endDate: DateTime
  folioNumber: Float
  schoolId: String
  schoolYear: Float
  startDate: DateTime
}

input NewSpecialty {
  code: String
  modalityId: String
  name: String
  schoolId: String
}

input NewStudent {
  academicGradeId: String
  campusId: [String!]
  courseId: String
  newUser: NewUser
  schoolId: [String!]
  userId: String
}

input NewTeacher {
  academicAsignatureId: [String!]
  attentionSchedule: String
  campusId: [String!]
  newUser: NewUser
  schoolId: [String!]
  userId: String
}

input NewUser {
  birthdate: DateTime
  documentNumber: String
  documentTypeId: String
  email: String
  genderId: String
  lastName: String
  name: String
  password: String
  phone: String
  profilePhoto: String
  roleId: String
  username: String
}

"""The Notification model"""
type Notification implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  dateRead: DateTime
  dateSend: DateTime
  id: ID!
  message: String
  title: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type NotificationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Notification!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The PerformanceLevel model"""
type PerformanceLevel implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  generalPerformanceLevel: GeneralPerformanceLevel
  generalPerformanceLevelId: String
  id: ID!
  minimumScore: Float
  name: String
  school: School
  schoolId: String
  topScore: Float
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type PerformanceLevelConnection {
  edges: [PerformanceLevelEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type PerformanceLevelEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: PerformanceLevel!
}

type Query {
  getAcademicArea(id: String!): AcademicArea
  getAcademicAsignature(id: String!): AcademicAsignature
  getAcademicDay(id: String!): AcademicDay
  getAcademicGrade(id: String!): AcademicGrade
  getAcademicHour(id: String!): AcademicHour
  getAcademicIndicator(id: String!): AcademicIndicator
  getAcademicPeriod(id: String!): AcademicPeriod
  getAcademicStandard(id: String!): AcademicStandard
  getAllAcademicArea(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): AcademicAreaConnection!
  getAllAcademicAsignature(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): AcademicAsignatureConnection!
  getAllAcademicDay(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AcademicDayConnection!
  getAllAcademicGrade(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): AcademicGradeConnection!
  getAllAcademicHour(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AcademicHourConnection!
  getAllAcademicIndicator(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): AcademicIndicatorConnection!
  getAllAcademicPeriod(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): AcademicPeriodConnection!
  getAllAcademicStandard(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): AcademicStandardConnection!
  getAllAuditLogin(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): AuditLoginConnection!
  getAllCampus(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): CampusConnection!
  getAllCampusAdministrator(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): CampusAdministratorConnection!
  getAllCampusCoordinator(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): CampusCoordinatorConnection!
  getAllCourse(
    academicGradeId: String

    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): CourseConnection!
  getAllDocumentType(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): DocumentTypeConnection!
  getAllEducationLevel(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): EducationLevelConnection!
  getAllEmail(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): EmailConnection!
  getAllEvaluativeComponent(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): EvaluativeComponentConnection!
  getAllForum(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): ForumConnection!
  getAllForumInteraction(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    forumId: String!

    """Paginate last"""
    last: Float
  ): ForumInteractionConnection!
  getAllGender(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GenderConnection!
  getAllGeneralAcademicArea(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicAreaConnection!
  getAllGeneralAcademicAsignature(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicAsignatureConnection!
  getAllGeneralAcademicCycle(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicCycleConnection!
  getAllGeneralAcademicGrade(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicGradeConnection!
  getAllGeneralAcademicStandard(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralAcademicStandardConnection!
  getAllGeneralPerformanceLevel(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): GeneralPerformanceLevelConnection!
  getAllGradeAssignment(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): GradeAssignmentConnection!
  getAllGuardian(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: [String!]

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: [String!]!
  ): GuardianConnection!
  getAllInbox(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    userId: String!
  ): InboxConnection!
  getAllMenu(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): MenuConnection!
  getAllMenuItem(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    menuId: String
    orderCreated: Boolean!
  ): MenuItemConnection!
  getAllModality(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): ModalityConnection!
  getAllModule(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): ModuleConnection!
  getAllMunicipality(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): MunicipalityConnection!
  getAllNotification(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    userId: String!
  ): NotificationConnection!
  getAllPerformanceLevel(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): PerformanceLevelConnection!
  getAllRole(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): RoleConnection!
  getAllRoleType(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    type: String!
  ): RoleConnection!
  getAllSchool(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): SchoolConnection!
  getAllSchoolAdministrator(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): SchoolAdministratorConnection!
  getAllSchoolYear(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): SchoolYearConnection!
  getAllSearchGuardian(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    documentNumber: String!
    documentTypeId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): GuardianConnection!
  getAllSpecialty(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): SpecialtyConnection!
  getAllStudent(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: String!

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: String!
  ): StudentConnection!
  getAllTeacher(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String
    campusId: [String!]

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
    schoolId: [String!]!
  ): TeacherConnection!
  getAllUser(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): UserConnection!
  getAuditLogin(id: String!): AuditLogin
  getCampus(id: String!): Campus
  getCampusAdministrator(id: String!): CampusAdministrator
  getCampusCoordinator(id: String!): CampusCoordinator
  getCourse(id: String!): Course
  getDocumentType(id: String!): DocumentType
  getEducationLevel(id: String!): EducationLevel
  getEmail(id: String!): Email
  getEvaluativeComponent(id: String!): EvaluativeComponent
  getForum(id: String!): Forum
  getForumInteraction(id: String!): ForumInteraction
  getGender(id: String!): Gender
  getGeneralAcademicArea(id: String!): GeneralAcademicArea
  getGeneralAcademicAsignature(id: String!): GeneralAcademicAsignature
  getGeneralAcademicCycle(id: String!): GeneralAcademicCycle
  getGeneralAcademicGrade(id: String!): GeneralAcademicGrade
  getGeneralAcademicStandard(id: String!): GeneralAcademicStandard
  getGeneralPerformanceLevel(id: String!): GeneralPerformanceLevel
  getGradeAssignment(id: String!): GradeAssignment
  getGuardian(id: String!): Guardian
  getInbox(id: String!): Inbox
  getMenu(id: String!): Menu
  getMenuItem(id: String!): MenuItem
  getModality(id: String!): Modality
  getModule(id: String!): Module
  getMunicipality(id: String!): Municipality
  getNotification(id: String!): Notification
  getPerformanceLevel(id: String!): PerformanceLevel
  getRole(id: String!): Role
  getSchool(id: String!): School
  getSchoolAdministrator(id: String!): SchoolAdministrator
  getSchoolYear(id: String!): SchoolYear
  getSpecialty(id: String!): Specialty
  getStudent(id: String!): Student
  getTeacher(id: String!): Teacher
  getUser(id: String!): User
  me: Jwt!
}

"""The Role model"""
type Role implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  isCampusAdministrator: Boolean
  isCampusCoordinator: Boolean
  isGuardian: Boolean
  isSchoolAdministrator: Boolean
  isStudent: Boolean
  isTeacher: Boolean
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type RoleConnection {
  edges: [RoleEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type RoleEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Role!
}

"""The School model"""
type School implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  daneCode: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

"""The SchoolAdministrator model"""
type SchoolAdministrator implements IModelData {
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type SchoolAdministratorConnection {
  edges: [SchoolAdministratorEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SchoolAdministratorEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: SchoolAdministrator!
}

type SchoolConnection {
  edges: [SchoolEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SchoolEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: School!
}

"""The SchoolYear model"""
type SchoolYear implements IModelSchoolData {
  active: Boolean
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  endDate: DateTime
  folioNumber: Float
  id: ID!
  school: School
  schoolId: String
  schoolYear: Float
  startDate: DateTime
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type SchoolYearConnection {
  edges: [SchoolYearEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SchoolYearEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: SchoolYear!
}

"""The Specialty model"""
type Specialty implements IModelSchoolData {
  active: Boolean
  code: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  modality: Modality
  modalityId: String
  name: String
  school: School
  schoolId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  version: Float
}

type SpecialtyConnection {
  edges: [SpecialtyEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type SpecialtyEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Specialty!
}

"""The Student model"""
type Student implements IModelData {
  academicGrade: AcademicGrade
  academicGradeId: String
  active: Boolean
  campus: [Campus!]
  campusId: [String!]
  course: Course
  courseId: String
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type StudentConnection {
  edges: [StudentEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type StudentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Student!
}

"""The Teacher model"""
type Teacher implements IModelData {
  academicAsignature: [AcademicAsignature!]
  academicAsignatureId: [String!]
  active: Boolean
  attentionSchedule: String
  campus: [Campus!]
  campusId: [String!]
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  id: ID!
  school: [School!]
  schoolId: [String!]
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  user: User
  userId: String
  version: Float
}

type TeacherConnection {
  edges: [TeacherEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type TeacherEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Teacher!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""The User model"""
type User {
  active: Boolean
  birthdate: DateTime
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  documentNumber: String
  documentType: DocumentType
  documentTypeId: String
  email: String
  gender: Gender
  genderId: String
  id: ID!
  lastName: String
  name: String
  password: String
  phone: String
  profilePhoto: String
  role: Role
  roleId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  username: String
  version: Float
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type UserEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: User!
}
